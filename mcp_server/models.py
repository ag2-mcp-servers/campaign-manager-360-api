# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:52:28+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AccountProfile(Enum):
    ACCOUNT_PROFILE_BASIC = 'ACCOUNT_PROFILE_BASIC'
    ACCOUNT_PROFILE_STANDARD = 'ACCOUNT_PROFILE_STANDARD'


class ActiveAdsLimitTier(Enum):
    ACTIVE_ADS_TIER_40K = 'ACTIVE_ADS_TIER_40K'
    ACTIVE_ADS_TIER_75K = 'ACTIVE_ADS_TIER_75K'
    ACTIVE_ADS_TIER_100K = 'ACTIVE_ADS_TIER_100K'
    ACTIVE_ADS_TIER_200K = 'ACTIVE_ADS_TIER_200K'
    ACTIVE_ADS_TIER_300K = 'ACTIVE_ADS_TIER_300K'
    ACTIVE_ADS_TIER_500K = 'ACTIVE_ADS_TIER_500K'
    ACTIVE_ADS_TIER_750K = 'ACTIVE_ADS_TIER_750K'
    ACTIVE_ADS_TIER_1M = 'ACTIVE_ADS_TIER_1M'


class AccountActiveAdSummary(BaseModel):
    accountId: Optional[str] = Field(None, description='ID of the account.')
    activeAds: Optional[str] = Field(
        None, description='Ads that have been activated for the account'
    )
    activeAdsLimitTier: Optional[ActiveAdsLimitTier] = Field(
        None, description='Maximum number of active ads allowed for the account.'
    )
    availableAds: Optional[str] = Field(
        None, description='Ads that can be activated for the account.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountActiveAdSummary".',
    )


class Level(Enum):
    USER = 'USER'
    ADMINISTRATOR = 'ADMINISTRATOR'


class AccountPermission(BaseModel):
    accountProfiles: Optional[List[AccountProfile]] = Field(
        None,
        description='Account profiles associated with this account permission. Possible values are: - "ACCOUNT_PROFILE_BASIC" - "ACCOUNT_PROFILE_STANDARD" ',
    )
    id: Optional[str] = Field(None, description='ID of this account permission.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermission".',
    )
    level: Optional[Level] = Field(
        None,
        description='Administrative level required to enable this account permission.',
    )
    name: Optional[str] = Field(None, description='Name of this account permission.')
    permissionGroupId: Optional[str] = Field(
        None, description='Permission group of this account permission.'
    )


class AccountPermissionGroup(BaseModel):
    id: Optional[str] = Field(None, description='ID of this account permission group.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionGroup".',
    )
    name: Optional[str] = Field(
        None, description='Name of this account permission group.'
    )


class AccountPermissionGroupsListResponse(BaseModel):
    accountPermissionGroups: Optional[List[AccountPermissionGroup]] = Field(
        None, description='Account permission group collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionGroupsListResponse".',
    )


class AccountPermissionsListResponse(BaseModel):
    accountPermissions: Optional[List[AccountPermission]] = Field(
        None, description='Account permission collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionsListResponse".',
    )


class TraffickerType(Enum):
    INTERNAL_NON_TRAFFICKER = 'INTERNAL_NON_TRAFFICKER'
    INTERNAL_TRAFFICKER = 'INTERNAL_TRAFFICKER'
    EXTERNAL_TRAFFICKER = 'EXTERNAL_TRAFFICKER'


class UserAccessType(Enum):
    NORMAL_USER = 'NORMAL_USER'
    SUPER_USER = 'SUPER_USER'
    INTERNAL_ADMINISTRATOR = 'INTERNAL_ADMINISTRATOR'
    READ_ONLY_SUPER_USER = 'READ_ONLY_SUPER_USER'


class Compatibility(Enum):
    DISPLAY = 'DISPLAY'
    DISPLAY_INTERSTITIAL = 'DISPLAY_INTERSTITIAL'
    APP = 'APP'
    APP_INTERSTITIAL = 'APP_INTERSTITIAL'
    IN_STREAM_VIDEO = 'IN_STREAM_VIDEO'
    IN_STREAM_AUDIO = 'IN_STREAM_AUDIO'


class Type(Enum):
    AD_SERVING_STANDARD_AD = 'AD_SERVING_STANDARD_AD'
    AD_SERVING_DEFAULT_AD = 'AD_SERVING_DEFAULT_AD'
    AD_SERVING_CLICK_TRACKER = 'AD_SERVING_CLICK_TRACKER'
    AD_SERVING_TRACKING = 'AD_SERVING_TRACKING'
    AD_SERVING_BRAND_SAFE_AD = 'AD_SERVING_BRAND_SAFE_AD'


class AdBlockingConfiguration(BaseModel):
    clickThroughUrl: Optional[str] = Field(
        None,
        description='Click-through URL used by brand-neutral ads. This is a required field when overrideClickThroughUrl is set to true.',
    )
    creativeBundleId: Optional[str] = Field(
        None,
        description='ID of a creative bundle to use for this campaign. If set, brand-neutral ads will select creatives from this bundle. Otherwise, a default transparent pixel will be used.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings.',
    )
    overrideClickThroughUrl: Optional[bool] = Field(
        None,
        description="Whether the brand-neutral ad's click-through URL comes from the campaign's creative bundle or the override URL. Must be set to true if ad blocking is enabled and no creative bundle is configured.",
    )


class PaymentSourceType(Enum):
    PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID = (
        'PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID'
    )
    PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID = (
        'PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID'
    )


class AdSlot(BaseModel):
    comment: Optional[str] = Field(None, description='Comment for this ad slot.')
    compatibility: Optional[Compatibility] = Field(
        None,
        description='Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.',
    )
    height: Optional[str] = Field(None, description='Height of this ad slot.')
    linkedPlacementId: Optional[str] = Field(
        None,
        description='ID of the placement from an external platform that is linked to this ad slot.',
    )
    name: Optional[str] = Field(None, description='Name of this ad slot.')
    paymentSourceType: Optional[PaymentSourceType] = Field(
        None, description='Payment source type of this ad slot.'
    )
    primary: Optional[bool] = Field(
        None, description='Primary ad slot of a roadblock inventory item.'
    )
    width: Optional[str] = Field(None, description='Width of this ad slot.')


class Status(Enum):
    APPROVED = 'APPROVED'
    ON_HOLD = 'ON_HOLD'


class AdvertiserGroup(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this advertiser group. This is a read-only field that can be left blank.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this advertiser group. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserGroup".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this advertiser group. This is a required field and must be less than 256 characters long and unique among advertiser groups of the same account.',
    )


class AdvertiserGroupsListResponse(BaseModel):
    advertiserGroups: Optional[List[AdvertiserGroup]] = Field(
        None, description='Advertiser group collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserGroupsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class AudienceSegment(BaseModel):
    allocation: Optional[int] = Field(
        None,
        description='Weight allocated to this segment. The weight assigned will be understood in proportion to the weights assigned to other segments in the same segment group. Acceptable values are 1 to 1000, inclusive.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this audience segment. This is a read-only, auto-generated field.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this audience segment. This is a required field and must be less than 65 characters long.',
    )


class AudienceSegmentGroup(BaseModel):
    audienceSegments: Optional[List[AudienceSegment]] = Field(
        None,
        description='Audience segments assigned to this group. The number of segments must be between 2 and 100.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this audience segment group. This is a read-only, auto-generated field.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this audience segment group. This is a required field and must be less than 65 characters long.',
    )


class Browser(BaseModel):
    browserVersionId: Optional[str] = Field(
        None,
        description='ID referring to this grouping of browser and version numbers. This is the ID used for targeting.',
    )
    dartId: Optional[str] = Field(
        None,
        description='DART ID of this browser. This is the ID used when generating reports.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#browser".',
    )
    majorVersion: Optional[str] = Field(
        None,
        description="Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.",
    )
    minorVersion: Optional[str] = Field(
        None,
        description="Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.",
    )
    name: Optional[str] = Field(None, description='Name of this browser.')


class BrowsersListResponse(BaseModel):
    browsers: Optional[List[Browser]] = Field(None, description='Browser collection.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#browsersListResponse".',
    )


class CampaignCreativeAssociation(BaseModel):
    creativeId: Optional[str] = Field(
        None,
        description='ID of the creative associated with the campaign. This is a required field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignCreativeAssociation".',
    )


class CampaignCreativeAssociationsListResponse(BaseModel):
    campaignCreativeAssociations: Optional[List[CampaignCreativeAssociation]] = Field(
        None, description='Campaign creative association collection'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignCreativeAssociationsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class CampaignManagerIds(BaseModel):
    adId: Optional[str] = Field(None, description='Ad ID for Campaign Manager.')
    campaignId: Optional[str] = Field(
        None, description='Campaign ID for Campaign Manager.'
    )
    creativeId: Optional[str] = Field(
        None, description='Creative ID for Campaign Manager.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignManagerIds".',
    )
    placementId: Optional[str] = Field(
        None, description='Placement ID for Campaign Manager.'
    )
    siteId: Optional[str] = Field(None, description='Site ID for Campaign Manager.')


class ChangeLog(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Account ID of the modified object.'
    )
    action: Optional[str] = Field(None, description='Action which caused the change.')
    changeTime: Optional[datetime] = None
    fieldName: Optional[str] = Field(
        None, description='Field name of the object which changed.'
    )
    id: Optional[str] = Field(None, description='ID of this change log.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#changeLog".',
    )
    newValue: Optional[str] = Field(None, description='New value of the object field.')
    objectId: Optional[str] = Field(
        None,
        description='ID of the object of this change log. The object could be a campaign, placement, ad, or other type.',
    )
    objectType: Optional[str] = Field(
        None, description='Object type of the change log.'
    )
    oldValue: Optional[str] = Field(None, description='Old value of the object field.')
    subaccountId: Optional[str] = Field(
        None, description='Subaccount ID of the modified object.'
    )
    transactionId: Optional[str] = Field(
        None,
        description='Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.',
    )
    userProfileId: Optional[str] = Field(
        None, description='ID of the user who modified the object.'
    )
    userProfileName: Optional[str] = Field(
        None, description='User profile name of the user who modified the object.'
    )


class ChangeLogsListResponse(BaseModel):
    changeLogs: Optional[List[ChangeLog]] = Field(
        None, description='Change log collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#changeLogsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class City(BaseModel):
    countryCode: Optional[str] = Field(
        None, description='Country code of the country to which this city belongs.'
    )
    countryDartId: Optional[str] = Field(
        None, description='DART ID of the country to which this city belongs.'
    )
    dartId: Optional[str] = Field(
        None,
        description='DART ID of this city. This is the ID used for targeting and generating reports.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#city".',
    )
    metroCode: Optional[str] = Field(
        None,
        description='Metro region code of the metro region (DMA) to which this city belongs.',
    )
    metroDmaId: Optional[str] = Field(
        None, description='ID of the metro region (DMA) to which this city belongs.'
    )
    name: Optional[str] = Field(None, description='Name of this city.')
    regionCode: Optional[str] = Field(
        None, description='Region code of the region to which this city belongs.'
    )
    regionDartId: Optional[str] = Field(
        None, description='DART ID of the region to which this city belongs.'
    )


class ClickThroughUrl(BaseModel):
    computedClickThroughUrl: Optional[str] = Field(
        None,
        description="Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: - If defaultLandingPage is enabled then the campaign's default landing page URL is assigned to this field. - If defaultLandingPage is not enabled and a landingPageId is specified then that landing page's URL is assigned to this field. - If neither of the above cases apply, then the customClickThroughUrl is assigned to this field. ",
    )
    customClickThroughUrl: Optional[str] = Field(
        None,
        description='Custom click-through URL. Applicable if the defaultLandingPage field is set to false and the landingPageId field is left unset.',
    )
    defaultLandingPage: Optional[bool] = Field(
        None, description='Whether the campaign default landing page is used.'
    )
    landingPageId: Optional[str] = Field(
        None,
        description='ID of the landing page for the click-through URL. Applicable if the defaultLandingPage field is set to false.',
    )


class ClickThroughUrlSuffixProperties(BaseModel):
    clickThroughUrlSuffix: Optional[str] = Field(
        None,
        description="Click-through URL suffix to apply to all ads in this entity's scope. Must be less than 128 characters long.",
    )
    overrideInheritedSuffix: Optional[bool] = Field(
        None,
        description='Whether this entity should override the inherited click-through URL suffix with its own defined value.',
    )


class CompanionClickThroughOverride(BaseModel):
    clickThroughUrl: Optional[ClickThroughUrl] = Field(
        None, description='Click-through URL of this companion click-through override.'
    )
    creativeId: Optional[str] = Field(
        None,
        description='ID of the creative for this companion click-through override.',
    )


class ConnectionType(BaseModel):
    id: Optional[str] = Field(None, description='ID of this connection type.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#connectionType".',
    )
    name: Optional[str] = Field(None, description='Name of this connection type.')


class ConnectionTypesListResponse(BaseModel):
    connectionTypes: Optional[List[ConnectionType]] = Field(
        None, description='Collection of connection types such as broadband and mobile.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#connectionTypesListResponse".',
    )


class ContentCategory(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this content category. This is a read-only field that can be left blank.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this content category. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#contentCategory".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this content category. This is a required field and must be less than 256 characters long and unique among content categories of the same account.',
    )


class Code(Enum):
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    INTERNAL = 'INTERNAL'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NOT_FOUND = 'NOT_FOUND'


class ConversionError(BaseModel):
    code: Optional[Code] = Field(None, description='The error code.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionError".',
    )
    message: Optional[str] = Field(None, description='A description of the error.')


class Country(BaseModel):
    countryCode: Optional[str] = Field(None, description='Country code.')
    dartId: Optional[str] = Field(
        None,
        description='DART ID of this country. This is the ID used for targeting and generating reports.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#country".',
    )
    name: Optional[str] = Field(None, description='Name of this country.')
    sslEnabled: Optional[bool] = Field(
        None, description='Whether ad serving supports secure servers in this country.'
    )


class ArtworkType(Enum):
    ARTWORK_TYPE_FLASH = 'ARTWORK_TYPE_FLASH'
    ARTWORK_TYPE_HTML5 = 'ARTWORK_TYPE_HTML5'
    ARTWORK_TYPE_MIXED = 'ARTWORK_TYPE_MIXED'
    ARTWORK_TYPE_IMAGE = 'ARTWORK_TYPE_IMAGE'


class AuthoringSource(Enum):
    CREATIVE_AUTHORING_SOURCE_DCM = 'CREATIVE_AUTHORING_SOURCE_DCM'
    CREATIVE_AUTHORING_SOURCE_DBM = 'CREATIVE_AUTHORING_SOURCE_DBM'
    CREATIVE_AUTHORING_SOURCE_STUDIO = 'CREATIVE_AUTHORING_SOURCE_STUDIO'
    CREATIVE_AUTHORING_SOURCE_GWD = 'CREATIVE_AUTHORING_SOURCE_GWD'
    CREATIVE_AUTHORING_SOURCE_ACS = 'CREATIVE_AUTHORING_SOURCE_ACS'


class AuthoringTool(Enum):
    NINJA = 'NINJA'
    SWIFFY = 'SWIFFY'


class BackupImageFeature(Enum):
    CSS_FONT_FACE = 'CSS_FONT_FACE'
    CSS_BACKGROUND_SIZE = 'CSS_BACKGROUND_SIZE'
    CSS_BORDER_IMAGE = 'CSS_BORDER_IMAGE'
    CSS_BORDER_RADIUS = 'CSS_BORDER_RADIUS'
    CSS_BOX_SHADOW = 'CSS_BOX_SHADOW'
    CSS_FLEX_BOX = 'CSS_FLEX_BOX'
    CSS_HSLA = 'CSS_HSLA'
    CSS_MULTIPLE_BGS = 'CSS_MULTIPLE_BGS'
    CSS_OPACITY = 'CSS_OPACITY'
    CSS_RGBA = 'CSS_RGBA'
    CSS_TEXT_SHADOW = 'CSS_TEXT_SHADOW'
    CSS_ANIMATIONS = 'CSS_ANIMATIONS'
    CSS_COLUMNS = 'CSS_COLUMNS'
    CSS_GENERATED_CONTENT = 'CSS_GENERATED_CONTENT'
    CSS_GRADIENTS = 'CSS_GRADIENTS'
    CSS_REFLECTIONS = 'CSS_REFLECTIONS'
    CSS_TRANSFORMS = 'CSS_TRANSFORMS'
    CSS_TRANSFORMS3D = 'CSS_TRANSFORMS3D'
    CSS_TRANSITIONS = 'CSS_TRANSITIONS'
    APPLICATION_CACHE = 'APPLICATION_CACHE'
    CANVAS = 'CANVAS'
    CANVAS_TEXT = 'CANVAS_TEXT'
    DRAG_AND_DROP = 'DRAG_AND_DROP'
    HASH_CHANGE = 'HASH_CHANGE'
    HISTORY = 'HISTORY'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    INDEXED_DB = 'INDEXED_DB'
    INPUT_ATTR_AUTOCOMPLETE = 'INPUT_ATTR_AUTOCOMPLETE'
    INPUT_ATTR_AUTOFOCUS = 'INPUT_ATTR_AUTOFOCUS'
    INPUT_ATTR_LIST = 'INPUT_ATTR_LIST'
    INPUT_ATTR_PLACEHOLDER = 'INPUT_ATTR_PLACEHOLDER'
    INPUT_ATTR_MAX = 'INPUT_ATTR_MAX'
    INPUT_ATTR_MIN = 'INPUT_ATTR_MIN'
    INPUT_ATTR_MULTIPLE = 'INPUT_ATTR_MULTIPLE'
    INPUT_ATTR_PATTERN = 'INPUT_ATTR_PATTERN'
    INPUT_ATTR_REQUIRED = 'INPUT_ATTR_REQUIRED'
    INPUT_ATTR_STEP = 'INPUT_ATTR_STEP'
    INPUT_TYPE_SEARCH = 'INPUT_TYPE_SEARCH'
    INPUT_TYPE_TEL = 'INPUT_TYPE_TEL'
    INPUT_TYPE_URL = 'INPUT_TYPE_URL'
    INPUT_TYPE_EMAIL = 'INPUT_TYPE_EMAIL'
    INPUT_TYPE_DATETIME = 'INPUT_TYPE_DATETIME'
    INPUT_TYPE_DATE = 'INPUT_TYPE_DATE'
    INPUT_TYPE_MONTH = 'INPUT_TYPE_MONTH'
    INPUT_TYPE_WEEK = 'INPUT_TYPE_WEEK'
    INPUT_TYPE_TIME = 'INPUT_TYPE_TIME'
    INPUT_TYPE_DATETIME_LOCAL = 'INPUT_TYPE_DATETIME_LOCAL'
    INPUT_TYPE_NUMBER = 'INPUT_TYPE_NUMBER'
    INPUT_TYPE_RANGE = 'INPUT_TYPE_RANGE'
    INPUT_TYPE_COLOR = 'INPUT_TYPE_COLOR'
    LOCAL_STORAGE = 'LOCAL_STORAGE'
    POST_MESSAGE = 'POST_MESSAGE'
    SESSION_STORAGE = 'SESSION_STORAGE'
    WEB_SOCKETS = 'WEB_SOCKETS'
    WEB_SQL_DATABASE = 'WEB_SQL_DATABASE'
    WEB_WORKERS = 'WEB_WORKERS'
    GEO_LOCATION = 'GEO_LOCATION'
    INLINE_SVG = 'INLINE_SVG'
    SMIL = 'SMIL'
    SVG_HREF = 'SVG_HREF'
    SVG_CLIP_PATHS = 'SVG_CLIP_PATHS'
    TOUCH = 'TOUCH'
    WEBGL = 'WEBGL'
    SVG_FILTERS = 'SVG_FILTERS'
    SVG_FE_IMAGE = 'SVG_FE_IMAGE'


class CompatibilityEnum(Enum):
    DISPLAY = 'DISPLAY'
    DISPLAY_INTERSTITIAL = 'DISPLAY_INTERSTITIAL'
    APP = 'APP'
    APP_INTERSTITIAL = 'APP_INTERSTITIAL'
    IN_STREAM_VIDEO = 'IN_STREAM_VIDEO'
    IN_STREAM_AUDIO = 'IN_STREAM_AUDIO'


class Type1(Enum):
    IMAGE = 'IMAGE'
    DISPLAY_REDIRECT = 'DISPLAY_REDIRECT'
    CUSTOM_DISPLAY = 'CUSTOM_DISPLAY'
    INTERNAL_REDIRECT = 'INTERNAL_REDIRECT'
    CUSTOM_DISPLAY_INTERSTITIAL = 'CUSTOM_DISPLAY_INTERSTITIAL'
    INTERSTITIAL_INTERNAL_REDIRECT = 'INTERSTITIAL_INTERNAL_REDIRECT'
    TRACKING_TEXT = 'TRACKING_TEXT'
    RICH_MEDIA_DISPLAY_BANNER = 'RICH_MEDIA_DISPLAY_BANNER'
    RICH_MEDIA_INPAGE_FLOATING = 'RICH_MEDIA_INPAGE_FLOATING'
    RICH_MEDIA_IM_EXPAND = 'RICH_MEDIA_IM_EXPAND'
    RICH_MEDIA_DISPLAY_EXPANDING = 'RICH_MEDIA_DISPLAY_EXPANDING'
    RICH_MEDIA_DISPLAY_INTERSTITIAL = 'RICH_MEDIA_DISPLAY_INTERSTITIAL'
    RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL = (
        'RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL'
    )
    RICH_MEDIA_MOBILE_IN_APP = 'RICH_MEDIA_MOBILE_IN_APP'
    FLASH_INPAGE = 'FLASH_INPAGE'
    INSTREAM_VIDEO = 'INSTREAM_VIDEO'
    VPAID_LINEAR_VIDEO = 'VPAID_LINEAR_VIDEO'
    VPAID_NON_LINEAR_VIDEO = 'VPAID_NON_LINEAR_VIDEO'
    INSTREAM_VIDEO_REDIRECT = 'INSTREAM_VIDEO_REDIRECT'
    RICH_MEDIA_PEEL_DOWN = 'RICH_MEDIA_PEEL_DOWN'
    HTML5_BANNER = 'HTML5_BANNER'
    DISPLAY = 'DISPLAY'
    DISPLAY_IMAGE_GALLERY = 'DISPLAY_IMAGE_GALLERY'
    BRAND_SAFE_DEFAULT_INSTREAM_VIDEO = 'BRAND_SAFE_DEFAULT_INSTREAM_VIDEO'
    INSTREAM_AUDIO = 'INSTREAM_AUDIO'


class Alignment(Enum):
    ALIGNMENT_TOP = 'ALIGNMENT_TOP'
    ALIGNMENT_RIGHT = 'ALIGNMENT_RIGHT'
    ALIGNMENT_BOTTOM = 'ALIGNMENT_BOTTOM'
    ALIGNMENT_LEFT = 'ALIGNMENT_LEFT'


class ChildAssetType(Enum):
    CHILD_ASSET_TYPE_FLASH = 'CHILD_ASSET_TYPE_FLASH'
    CHILD_ASSET_TYPE_VIDEO = 'CHILD_ASSET_TYPE_VIDEO'
    CHILD_ASSET_TYPE_IMAGE = 'CHILD_ASSET_TYPE_IMAGE'
    CHILD_ASSET_TYPE_DATA = 'CHILD_ASSET_TYPE_DATA'


class DetectedFeature(Enum):
    CSS_FONT_FACE = 'CSS_FONT_FACE'
    CSS_BACKGROUND_SIZE = 'CSS_BACKGROUND_SIZE'
    CSS_BORDER_IMAGE = 'CSS_BORDER_IMAGE'
    CSS_BORDER_RADIUS = 'CSS_BORDER_RADIUS'
    CSS_BOX_SHADOW = 'CSS_BOX_SHADOW'
    CSS_FLEX_BOX = 'CSS_FLEX_BOX'
    CSS_HSLA = 'CSS_HSLA'
    CSS_MULTIPLE_BGS = 'CSS_MULTIPLE_BGS'
    CSS_OPACITY = 'CSS_OPACITY'
    CSS_RGBA = 'CSS_RGBA'
    CSS_TEXT_SHADOW = 'CSS_TEXT_SHADOW'
    CSS_ANIMATIONS = 'CSS_ANIMATIONS'
    CSS_COLUMNS = 'CSS_COLUMNS'
    CSS_GENERATED_CONTENT = 'CSS_GENERATED_CONTENT'
    CSS_GRADIENTS = 'CSS_GRADIENTS'
    CSS_REFLECTIONS = 'CSS_REFLECTIONS'
    CSS_TRANSFORMS = 'CSS_TRANSFORMS'
    CSS_TRANSFORMS3D = 'CSS_TRANSFORMS3D'
    CSS_TRANSITIONS = 'CSS_TRANSITIONS'
    APPLICATION_CACHE = 'APPLICATION_CACHE'
    CANVAS = 'CANVAS'
    CANVAS_TEXT = 'CANVAS_TEXT'
    DRAG_AND_DROP = 'DRAG_AND_DROP'
    HASH_CHANGE = 'HASH_CHANGE'
    HISTORY = 'HISTORY'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    INDEXED_DB = 'INDEXED_DB'
    INPUT_ATTR_AUTOCOMPLETE = 'INPUT_ATTR_AUTOCOMPLETE'
    INPUT_ATTR_AUTOFOCUS = 'INPUT_ATTR_AUTOFOCUS'
    INPUT_ATTR_LIST = 'INPUT_ATTR_LIST'
    INPUT_ATTR_PLACEHOLDER = 'INPUT_ATTR_PLACEHOLDER'
    INPUT_ATTR_MAX = 'INPUT_ATTR_MAX'
    INPUT_ATTR_MIN = 'INPUT_ATTR_MIN'
    INPUT_ATTR_MULTIPLE = 'INPUT_ATTR_MULTIPLE'
    INPUT_ATTR_PATTERN = 'INPUT_ATTR_PATTERN'
    INPUT_ATTR_REQUIRED = 'INPUT_ATTR_REQUIRED'
    INPUT_ATTR_STEP = 'INPUT_ATTR_STEP'
    INPUT_TYPE_SEARCH = 'INPUT_TYPE_SEARCH'
    INPUT_TYPE_TEL = 'INPUT_TYPE_TEL'
    INPUT_TYPE_URL = 'INPUT_TYPE_URL'
    INPUT_TYPE_EMAIL = 'INPUT_TYPE_EMAIL'
    INPUT_TYPE_DATETIME = 'INPUT_TYPE_DATETIME'
    INPUT_TYPE_DATE = 'INPUT_TYPE_DATE'
    INPUT_TYPE_MONTH = 'INPUT_TYPE_MONTH'
    INPUT_TYPE_WEEK = 'INPUT_TYPE_WEEK'
    INPUT_TYPE_TIME = 'INPUT_TYPE_TIME'
    INPUT_TYPE_DATETIME_LOCAL = 'INPUT_TYPE_DATETIME_LOCAL'
    INPUT_TYPE_NUMBER = 'INPUT_TYPE_NUMBER'
    INPUT_TYPE_RANGE = 'INPUT_TYPE_RANGE'
    INPUT_TYPE_COLOR = 'INPUT_TYPE_COLOR'
    LOCAL_STORAGE = 'LOCAL_STORAGE'
    POST_MESSAGE = 'POST_MESSAGE'
    SESSION_STORAGE = 'SESSION_STORAGE'
    WEB_SOCKETS = 'WEB_SOCKETS'
    WEB_SQL_DATABASE = 'WEB_SQL_DATABASE'
    WEB_WORKERS = 'WEB_WORKERS'
    GEO_LOCATION = 'GEO_LOCATION'
    INLINE_SVG = 'INLINE_SVG'
    SMIL = 'SMIL'
    SVG_HREF = 'SVG_HREF'
    SVG_CLIP_PATHS = 'SVG_CLIP_PATHS'
    TOUCH = 'TOUCH'
    WEBGL = 'WEBGL'
    SVG_FILTERS = 'SVG_FILTERS'
    SVG_FE_IMAGE = 'SVG_FE_IMAGE'


class DisplayType(Enum):
    ASSET_DISPLAY_TYPE_INPAGE = 'ASSET_DISPLAY_TYPE_INPAGE'
    ASSET_DISPLAY_TYPE_FLOATING = 'ASSET_DISPLAY_TYPE_FLOATING'
    ASSET_DISPLAY_TYPE_OVERLAY = 'ASSET_DISPLAY_TYPE_OVERLAY'
    ASSET_DISPLAY_TYPE_EXPANDING = 'ASSET_DISPLAY_TYPE_EXPANDING'
    ASSET_DISPLAY_TYPE_FLASH_IN_FLASH = 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH'
    ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING = (
        'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING'
    )
    ASSET_DISPLAY_TYPE_PEEL_DOWN = 'ASSET_DISPLAY_TYPE_PEEL_DOWN'
    ASSET_DISPLAY_TYPE_VPAID_LINEAR = 'ASSET_DISPLAY_TYPE_VPAID_LINEAR'
    ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR = 'ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR'
    ASSET_DISPLAY_TYPE_BACKDROP = 'ASSET_DISPLAY_TYPE_BACKDROP'


class DurationType(Enum):
    ASSET_DURATION_TYPE_AUTO = 'ASSET_DURATION_TYPE_AUTO'
    ASSET_DURATION_TYPE_NONE = 'ASSET_DURATION_TYPE_NONE'
    ASSET_DURATION_TYPE_CUSTOM = 'ASSET_DURATION_TYPE_CUSTOM'


class Orientation(Enum):
    LANDSCAPE = 'LANDSCAPE'
    PORTRAIT = 'PORTRAIT'
    SQUARE = 'SQUARE'


class PositionLeftUnit(Enum):
    OFFSET_UNIT_PIXEL = 'OFFSET_UNIT_PIXEL'
    OFFSET_UNIT_PERCENT = 'OFFSET_UNIT_PERCENT'
    OFFSET_UNIT_PIXEL_FROM_CENTER = 'OFFSET_UNIT_PIXEL_FROM_CENTER'


class PositionTopUnit(Enum):
    OFFSET_UNIT_PIXEL = 'OFFSET_UNIT_PIXEL'
    OFFSET_UNIT_PERCENT = 'OFFSET_UNIT_PERCENT'
    OFFSET_UNIT_PIXEL_FROM_CENTER = 'OFFSET_UNIT_PIXEL_FROM_CENTER'


class Role(Enum):
    PRIMARY = 'PRIMARY'
    BACKUP_IMAGE = 'BACKUP_IMAGE'
    ADDITIONAL_IMAGE = 'ADDITIONAL_IMAGE'
    ADDITIONAL_FLASH = 'ADDITIONAL_FLASH'
    PARENT_VIDEO = 'PARENT_VIDEO'
    TRANSCODED_VIDEO = 'TRANSCODED_VIDEO'
    OTHER = 'OTHER'
    ALTERNATE_VIDEO = 'ALTERNATE_VIDEO'
    PARENT_AUDIO = 'PARENT_AUDIO'
    TRANSCODED_AUDIO = 'TRANSCODED_AUDIO'


class StartTimeType(Enum):
    ASSET_START_TIME_TYPE_NONE = 'ASSET_START_TIME_TYPE_NONE'
    ASSET_START_TIME_TYPE_CUSTOM = 'ASSET_START_TIME_TYPE_CUSTOM'


class WindowMode(Enum):
    OPAQUE = 'OPAQUE'
    WINDOW = 'WINDOW'
    TRANSPARENT = 'TRANSPARENT'


class Type2(Enum):
    IMAGE = 'IMAGE'
    FLASH = 'FLASH'
    VIDEO = 'VIDEO'
    HTML = 'HTML'
    HTML_IMAGE = 'HTML_IMAGE'
    AUDIO = 'AUDIO'


class CreativeAssetId(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: ".-_ ". Spaces are allowed.',
    )
    type: Optional[Type2] = Field(
        None,
        description='Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE.',
    )


class WarnedValidationRule(Enum):
    CLICK_TAG_NON_TOP_LEVEL = 'CLICK_TAG_NON_TOP_LEVEL'
    CLICK_TAG_MISSING = 'CLICK_TAG_MISSING'
    CLICK_TAG_MORE_THAN_ONE = 'CLICK_TAG_MORE_THAN_ONE'
    CLICK_TAG_INVALID = 'CLICK_TAG_INVALID'
    ORPHANED_ASSET = 'ORPHANED_ASSET'
    PRIMARY_HTML_MISSING = 'PRIMARY_HTML_MISSING'
    EXTERNAL_FILE_REFERENCED = 'EXTERNAL_FILE_REFERENCED'
    MRAID_REFERENCED = 'MRAID_REFERENCED'
    ADMOB_REFERENCED = 'ADMOB_REFERENCED'
    FILE_TYPE_INVALID = 'FILE_TYPE_INVALID'
    ZIP_INVALID = 'ZIP_INVALID'
    LINKED_FILE_NOT_FOUND = 'LINKED_FILE_NOT_FOUND'
    MAX_FLASH_VERSION_11 = 'MAX_FLASH_VERSION_11'
    NOT_SSL_COMPLIANT = 'NOT_SSL_COMPLIANT'
    FILE_DETAIL_EMPTY = 'FILE_DETAIL_EMPTY'
    ASSET_INVALID = 'ASSET_INVALID'
    GWD_PROPERTIES_INVALID = 'GWD_PROPERTIES_INVALID'
    ENABLER_UNSUPPORTED_METHOD_DCM = 'ENABLER_UNSUPPORTED_METHOD_DCM'
    ASSET_FORMAT_UNSUPPORTED_DCM = 'ASSET_FORMAT_UNSUPPORTED_DCM'
    COMPONENT_UNSUPPORTED_DCM = 'COMPONENT_UNSUPPORTED_DCM'
    HTML5_FEATURE_UNSUPPORTED = 'HTML5_FEATURE_UNSUPPORTED'
    CLICK_TAG_IN_GWD = 'CLICK_TAG_IN_GWD'
    CLICK_TAG_HARD_CODED = 'CLICK_TAG_HARD_CODED'
    SVG_INVALID = 'SVG_INVALID'
    CLICK_TAG_IN_RICH_MEDIA = 'CLICK_TAG_IN_RICH_MEDIA'
    MISSING_ENABLER_REFERENCE = 'MISSING_ENABLER_REFERENCE'


class CreativeClickThroughUrl(BaseModel):
    computedClickThroughUrl: Optional[str] = Field(
        None,
        description="Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: - If landingPageId is specified then that landing page's URL is assigned to this field. - Otherwise, the customClickThroughUrl is assigned to this field. ",
    )
    customClickThroughUrl: Optional[str] = Field(
        None,
        description='Custom click-through URL. Applicable if the landingPageId field is left unset.',
    )
    landingPageId: Optional[str] = Field(
        None, description='ID of the landing page for the click-through URL.'
    )


class AdvertiserCustomEventType(Enum):
    ADVERTISER_EVENT_TIMER = 'ADVERTISER_EVENT_TIMER'
    ADVERTISER_EVENT_EXIT = 'ADVERTISER_EVENT_EXIT'
    ADVERTISER_EVENT_COUNTER = 'ADVERTISER_EVENT_COUNTER'


class TargetType(Enum):
    TARGET_BLANK = 'TARGET_BLANK'
    TARGET_TOP = 'TARGET_TOP'
    TARGET_SELF = 'TARGET_SELF'
    TARGET_PARENT = 'TARGET_PARENT'
    TARGET_POPUP = 'TARGET_POPUP'


class CreativeFieldAssignment(BaseModel):
    creativeFieldId: Optional[str] = Field(
        None, description='ID of the creative field.'
    )
    creativeFieldValueId: Optional[str] = Field(
        None, description='ID of the creative field value.'
    )


class CreativeFieldValue(BaseModel):
    id: Optional[str] = Field(
        None,
        description='ID of this creative field value. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldValue".',
    )
    value: Optional[str] = Field(
        None,
        description='Value of this creative field value. It needs to be less than 256 characters in length and unique per creative field.',
    )


class CreativeFieldValuesListResponse(BaseModel):
    creativeFieldValues: Optional[List[CreativeFieldValue]] = Field(
        None, description='Creative field value collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldValuesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class CreativeGroupNumber(Enum):
    CREATIVE_GROUP_ONE = 'CREATIVE_GROUP_ONE'
    CREATIVE_GROUP_TWO = 'CREATIVE_GROUP_TWO'


class CreativeGroupAssignment(BaseModel):
    creativeGroupId: Optional[str] = Field(
        None, description='ID of the creative group to be assigned.'
    )
    creativeGroupNumber: Optional[CreativeGroupNumber] = Field(
        None, description='Creative group number of the creative group assignment.'
    )


class OptimizationModel(Enum):
    CLICK = 'CLICK'
    POST_CLICK = 'POST_CLICK'
    POST_IMPRESSION = 'POST_IMPRESSION'
    POST_CLICK_AND_IMPRESSION = 'POST_CLICK_AND_IMPRESSION'
    VIDEO_COMPLETION = 'VIDEO_COMPLETION'


class Type3(Enum):
    CREATIVE_ROTATION_TYPE_SEQUENTIAL = 'CREATIVE_ROTATION_TYPE_SEQUENTIAL'
    CREATIVE_ROTATION_TYPE_RANDOM = 'CREATIVE_ROTATION_TYPE_RANDOM'


class WeightCalculationStrategy(Enum):
    WEIGHT_STRATEGY_EQUAL = 'WEIGHT_STRATEGY_EQUAL'
    WEIGHT_STRATEGY_CUSTOM = 'WEIGHT_STRATEGY_CUSTOM'
    WEIGHT_STRATEGY_HIGHEST_CTR = 'WEIGHT_STRATEGY_HIGHEST_CTR'
    WEIGHT_STRATEGY_OPTIMIZED = 'WEIGHT_STRATEGY_OPTIMIZED'


class EventType(Enum):
    UNKNOWN = 'UNKNOWN'
    INSERT = 'INSERT'
    ANNOTATE = 'ANNOTATE'


class CustomEventClickAnnotation(BaseModel):
    gclid: Optional[str] = Field(
        None,
        description='The Google click ID. Use this field to annotate the click associated with the gclid.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventClickAnnotation".',
    )


class Code1(Enum):
    UNKNOWN = 'UNKNOWN'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    INTERNAL = 'INTERNAL'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NOT_FOUND = 'NOT_FOUND'


class CustomEventError(BaseModel):
    code: Optional[Code1] = Field(None, description='The error code.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventError".',
    )
    message: Optional[str] = Field(None, description='A description of the error.')


class CustomEventImpressionAnnotation(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventImpressionAnnotation".',
    )
    pathImpressionId: Optional[str] = Field(
        None,
        description='The path impression ID. Use this field to annotate the impression associated with the pathImpressionId.',
    )


class InsertEventType(Enum):
    UNKNOWN = 'UNKNOWN'
    IMPRESSION = 'IMPRESSION'
    CLICK = 'CLICK'


class Type4(Enum):
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    U10 = 'U10'
    U11 = 'U11'
    U12 = 'U12'
    U13 = 'U13'
    U14 = 'U14'
    U15 = 'U15'
    U16 = 'U16'
    U17 = 'U17'
    U18 = 'U18'
    U19 = 'U19'
    U20 = 'U20'
    U21 = 'U21'
    U22 = 'U22'
    U23 = 'U23'
    U24 = 'U24'
    U25 = 'U25'
    U26 = 'U26'
    U27 = 'U27'
    U28 = 'U28'
    U29 = 'U29'
    U30 = 'U30'
    U31 = 'U31'
    U32 = 'U32'
    U33 = 'U33'
    U34 = 'U34'
    U35 = 'U35'
    U36 = 'U36'
    U37 = 'U37'
    U38 = 'U38'
    U39 = 'U39'
    U40 = 'U40'
    U41 = 'U41'
    U42 = 'U42'
    U43 = 'U43'
    U44 = 'U44'
    U45 = 'U45'
    U46 = 'U46'
    U47 = 'U47'
    U48 = 'U48'
    U49 = 'U49'
    U50 = 'U50'
    U51 = 'U51'
    U52 = 'U52'
    U53 = 'U53'
    U54 = 'U54'
    U55 = 'U55'
    U56 = 'U56'
    U57 = 'U57'
    U58 = 'U58'
    U59 = 'U59'
    U60 = 'U60'
    U61 = 'U61'
    U62 = 'U62'
    U63 = 'U63'
    U64 = 'U64'
    U65 = 'U65'
    U66 = 'U66'
    U67 = 'U67'
    U68 = 'U68'
    U69 = 'U69'
    U70 = 'U70'
    U71 = 'U71'
    U72 = 'U72'
    U73 = 'U73'
    U74 = 'U74'
    U75 = 'U75'
    U76 = 'U76'
    U77 = 'U77'
    U78 = 'U78'
    U79 = 'U79'
    U80 = 'U80'
    U81 = 'U81'
    U82 = 'U82'
    U83 = 'U83'
    U84 = 'U84'
    U85 = 'U85'
    U86 = 'U86'
    U87 = 'U87'
    U88 = 'U88'
    U89 = 'U89'
    U90 = 'U90'
    U91 = 'U91'
    U92 = 'U92'
    U93 = 'U93'
    U94 = 'U94'
    U95 = 'U95'
    U96 = 'U96'
    U97 = 'U97'
    U98 = 'U98'
    U99 = 'U99'
    U100 = 'U100'


class CustomFloodlightVariable(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customFloodlightVariable".',
    )
    type: Optional[Type4] = Field(
        None,
        description='The type of custom floodlight variable to supply a value for. These map to the "u[1-20]=" in the tags.',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the custom floodlight variable. The length of string must not exceed 100 characters.',
    )


class CustomVariable(BaseModel):
    index: Optional[str] = Field(None, description='The index of the custom variable.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customVariable".',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the custom variable. The length of string must not exceed 50 characters.',
    )


class CustomViewabilityMetricConfiguration(BaseModel):
    audible: Optional[bool] = Field(
        None, description='Whether the video must be audible to count an impression.'
    )
    timeMillis: Optional[int] = Field(
        None,
        description='The time in milliseconds the video must play for the Custom Viewability Metric to count an impression. If both this and timePercent are specified, the earlier of the two will be used.',
    )
    timePercent: Optional[int] = Field(
        None,
        description='The percentage of video that must play for the Custom Viewability Metric to count an impression. If both this and timeMillis are specified, the earlier of the two will be used.',
    )
    viewabilityPercent: Optional[int] = Field(
        None,
        description='The percentage of video that must be on screen for the Custom Viewability Metric to count an impression.',
    )


class DV3Ids(BaseModel):
    dvCampaignId: Optional[str] = Field(None, description='Campaign ID for DV360.')
    dvCreativeId: Optional[str] = Field(None, description='Creative ID for DV360.')
    dvInsertionOrderId: Optional[str] = Field(
        None, description='Insertion Order ID for DV360.'
    )
    dvLineItemId: Optional[str] = Field(None, description='Line Item ID for DV360.')
    dvSiteId: Optional[str] = Field(None, description='Site ID for DV360.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#dV3Ids".',
    )


class RelativeDateRange(Enum):
    TODAY = 'TODAY'
    YESTERDAY = 'YESTERDAY'
    WEEK_TO_DATE = 'WEEK_TO_DATE'
    MONTH_TO_DATE = 'MONTH_TO_DATE'
    QUARTER_TO_DATE = 'QUARTER_TO_DATE'
    YEAR_TO_DATE = 'YEAR_TO_DATE'
    PREVIOUS_WEEK = 'PREVIOUS_WEEK'
    PREVIOUS_MONTH = 'PREVIOUS_MONTH'
    PREVIOUS_QUARTER = 'PREVIOUS_QUARTER'
    PREVIOUS_YEAR = 'PREVIOUS_YEAR'
    LAST_7_DAYS = 'LAST_7_DAYS'
    LAST_30_DAYS = 'LAST_30_DAYS'
    LAST_90_DAYS = 'LAST_90_DAYS'
    LAST_365_DAYS = 'LAST_365_DAYS'
    LAST_24_MONTHS = 'LAST_24_MONTHS'
    LAST_14_DAYS = 'LAST_14_DAYS'
    LAST_60_DAYS = 'LAST_60_DAYS'


class DateRange(BaseModel):
    endDate: Optional[date] = None
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#dateRange.',
    )
    relativeDateRange: Optional[RelativeDateRange] = Field(
        None,
        description='The date range relative to the date of when the report is run.',
    )
    startDate: Optional[date] = None


class DaysOfWeekEnum(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class DayPartTargeting(BaseModel):
    daysOfWeek: Optional[List[DaysOfWeekEnum]] = Field(
        None,
        description='Days of the week when the ad will serve. Acceptable values are: - "SUNDAY" - "MONDAY" - "TUESDAY" - "WEDNESDAY" - "THURSDAY" - "FRIDAY" - "SATURDAY" ',
    )
    hoursOfDay: Optional[List[int]] = Field(
        None,
        description='Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive.',
    )
    userLocalTime: Optional[bool] = Field(
        None,
        description="Whether or not to use the user's local time. If false, the America/New York time zone applies.",
    )


class DefaultClickThroughEventTagProperties(BaseModel):
    defaultClickThroughEventTagId: Optional[str] = Field(
        None,
        description="ID of the click-through event tag to apply to all ads in this entity's scope.",
    )
    overrideInheritedEventTag: Optional[bool] = Field(
        None,
        description='Whether this entity should override the inherited default click-through event tag with its own defined value.',
    )


class Priority(Enum):
    AD_PRIORITY_01 = 'AD_PRIORITY_01'
    AD_PRIORITY_02 = 'AD_PRIORITY_02'
    AD_PRIORITY_03 = 'AD_PRIORITY_03'
    AD_PRIORITY_04 = 'AD_PRIORITY_04'
    AD_PRIORITY_05 = 'AD_PRIORITY_05'
    AD_PRIORITY_06 = 'AD_PRIORITY_06'
    AD_PRIORITY_07 = 'AD_PRIORITY_07'
    AD_PRIORITY_08 = 'AD_PRIORITY_08'
    AD_PRIORITY_09 = 'AD_PRIORITY_09'
    AD_PRIORITY_10 = 'AD_PRIORITY_10'
    AD_PRIORITY_11 = 'AD_PRIORITY_11'
    AD_PRIORITY_12 = 'AD_PRIORITY_12'
    AD_PRIORITY_13 = 'AD_PRIORITY_13'
    AD_PRIORITY_14 = 'AD_PRIORITY_14'
    AD_PRIORITY_15 = 'AD_PRIORITY_15'
    AD_PRIORITY_16 = 'AD_PRIORITY_16'


class DfpSettings(BaseModel):
    dfpNetworkCode: Optional[str] = Field(
        None, description='Ad Manager network code for this directory site.'
    )
    dfpNetworkName: Optional[str] = Field(
        None, description='Ad Manager network name for this directory site.'
    )
    programmaticPlacementAccepted: Optional[bool] = Field(
        None, description='Whether this directory site accepts programmatic placements.'
    )
    pubPaidPlacementAccepted: Optional[bool] = Field(
        None, description='Whether this directory site accepts publisher-paid tags.'
    )
    publisherPortalOnly: Optional[bool] = Field(
        None,
        description='Whether this directory site is available only via Publisher Portal.',
    )


class Dimension(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#dimension.',
    )
    name: Optional[str] = Field(
        None, description='The dimension name, e.g. dfa:advertiser'
    )


class DimensionFilter(BaseModel):
    dimensionName: Optional[str] = Field(
        None, description='The name of the dimension to filter.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#dimensionFilter.',
    )
    value: Optional[str] = Field(
        None, description='The value of the dimension to filter.'
    )


class MatchType(Enum):
    EXACT = 'EXACT'
    BEGINS_WITH = 'BEGINS_WITH'
    CONTAINS = 'CONTAINS'
    WILDCARD_EXPRESSION = 'WILDCARD_EXPRESSION'


class DimensionValue(BaseModel):
    dimensionName: Optional[str] = Field(None, description='The name of the dimension.')
    etag: Optional[str] = Field(
        None, description='The eTag of this response for caching purposes.'
    )
    id: Optional[str] = Field(
        None, description='The ID associated with the value if available.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#dimensionValue.',
    )
    matchType: Optional[MatchType] = Field(
        None,
        description="Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.",
    )
    value: Optional[str] = Field(None, description='The value of the dimension.')


class DimensionValueList(BaseModel):
    etag: Optional[str] = Field(
        None, description='The eTag of this response for caching purposes.'
    )
    items: Optional[List[DimensionValue]] = Field(
        None, description='The dimension values returned in this response.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of list this is, in this case dfareporting#dimensionValueList.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through dimension values. To retrieve the next page of results, set the next request\'s "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.',
    )


class DimensionValueRequest(BaseModel):
    dimensionName: Optional[str] = Field(
        None,
        description='The name of the dimension for which values should be requested.',
    )
    endDate: Optional[date] = None
    filters: Optional[List[DimensionFilter]] = Field(
        None,
        description='The list of filters by which to filter values. The filters are ANDed.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of request this is, in this case dfareporting#dimensionValueRequest .',
    )
    startDate: Optional[date] = None


class InpageTagFormat(Enum):
    STANDARD = 'STANDARD'
    IFRAME_JAVASCRIPT_INPAGE = 'IFRAME_JAVASCRIPT_INPAGE'
    INTERNAL_REDIRECT_INPAGE = 'INTERNAL_REDIRECT_INPAGE'
    JAVASCRIPT_INPAGE = 'JAVASCRIPT_INPAGE'


class InterstitialTagFormat(Enum):
    IFRAME_JAVASCRIPT_INTERSTITIAL = 'IFRAME_JAVASCRIPT_INTERSTITIAL'
    INTERNAL_REDIRECT_INTERSTITIAL = 'INTERNAL_REDIRECT_INTERSTITIAL'
    JAVASCRIPT_INTERSTITIAL = 'JAVASCRIPT_INTERSTITIAL'


class DirectorySiteSettings(BaseModel):
    activeViewOptOut: Optional[bool] = Field(
        None,
        description='Whether this directory site has disabled active view creatives.',
    )
    dfpSettings: Optional[DfpSettings] = Field(
        None, description='Directory site Ad Manager settings.'
    )
    instreamVideoPlacementAccepted: Optional[bool] = Field(
        None, description='Whether this site accepts in-stream video ads.'
    )
    interstitialPlacementAccepted: Optional[bool] = Field(
        None, description='Whether this site accepts interstitial ads.'
    )


class ObjectType(Enum):
    OBJECT_ADVERTISER = 'OBJECT_ADVERTISER'
    OBJECT_AD = 'OBJECT_AD'
    OBJECT_CREATIVE = 'OBJECT_CREATIVE'
    OBJECT_PLACEMENT = 'OBJECT_PLACEMENT'


class DynamicTargetingKey(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#dynamicTargetingKey".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.',
    )
    objectId: Optional[str] = Field(
        None,
        description='ID of the object of this dynamic targeting key. This is a required field.',
    )
    objectType: Optional[ObjectType] = Field(
        None,
        description='Type of the object of this dynamic targeting key. This is a required field.',
    )


class DynamicTargetingKeysListResponse(BaseModel):
    dynamicTargetingKeys: Optional[List[DynamicTargetingKey]] = Field(
        None, description='Dynamic targeting key collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#dynamicTargetingKeysListResponse".',
    )


class EncryptionEntityType(Enum):
    ENCRYPTION_ENTITY_TYPE_UNKNOWN = 'ENCRYPTION_ENTITY_TYPE_UNKNOWN'
    DCM_ACCOUNT = 'DCM_ACCOUNT'
    DCM_ADVERTISER = 'DCM_ADVERTISER'
    DBM_PARTNER = 'DBM_PARTNER'
    DBM_ADVERTISER = 'DBM_ADVERTISER'
    ADWORDS_CUSTOMER = 'ADWORDS_CUSTOMER'
    DFP_NETWORK_CODE = 'DFP_NETWORK_CODE'


class EncryptionSource(Enum):
    ENCRYPTION_SCOPE_UNKNOWN = 'ENCRYPTION_SCOPE_UNKNOWN'
    AD_SERVING = 'AD_SERVING'
    DATA_TRANSFER = 'DATA_TRANSFER'


class EncryptionInfo(BaseModel):
    encryptionEntityId: Optional[str] = Field(
        None,
        description='The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.',
    )
    encryptionEntityType: Optional[EncryptionEntityType] = Field(
        None,
        description='The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.',
    )
    encryptionSource: Optional[EncryptionSource] = Field(
        None,
        description='Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#encryptionInfo".',
    )


class SiteFilterType(Enum):
    WHITELIST = 'WHITELIST'
    BLACKLIST = 'BLACKLIST'


class Status1(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Type5(Enum):
    IMPRESSION_IMAGE_EVENT_TAG = 'IMPRESSION_IMAGE_EVENT_TAG'
    IMPRESSION_JAVASCRIPT_EVENT_TAG = 'IMPRESSION_JAVASCRIPT_EVENT_TAG'
    CLICK_THROUGH_EVENT_TAG = 'CLICK_THROUGH_EVENT_TAG'


class EventTag(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this event tag. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this event tag. This field or the campaignId field is required on insertion.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    campaignId: Optional[str] = Field(
        None,
        description='Campaign ID of this event tag. This field or the advertiserId field is required on insertion.',
    )
    campaignIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the campaign. This is a read-only, auto-generated field.',
    )
    enabledByDefault: Optional[bool] = Field(
        None,
        description="Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.",
    )
    excludeFromAdxRequests: Optional[bool] = Field(
        None,
        description='Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this event tag. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTag".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this event tag. This is a required field and must be less than 256 characters long.',
    )
    siteFilterType: Optional[SiteFilterType] = Field(
        None,
        description='Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.',
    )
    siteIds: Optional[List[str]] = Field(
        None,
        description='Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.',
    )
    sslCompliant: Optional[bool] = Field(
        None,
        description='Whether this tag is SSL-compliant or not. This is a read-only field.',
    )
    status: Optional[Status1] = Field(
        None,
        description='Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this event tag. This is a read-only field that can be left blank.',
    )
    type: Optional[Type5] = Field(
        None,
        description='Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.',
    )
    url: Optional[str] = Field(
        None,
        description='Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.',
    )
    urlEscapeLevels: Optional[int] = Field(
        None,
        description='Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.',
    )


class EventTagOverride(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Whether this override is enabled.'
    )
    id: Optional[str] = Field(
        None,
        description='ID of this event tag override. This is a read-only, auto-generated field.',
    )


class EventTagsListResponse(BaseModel):
    eventTags: Optional[List[EventTag]] = Field(
        None, description='Event tag collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTagsListResponse".',
    )


class Format(Enum):
    CSV = 'CSV'
    EXCEL = 'EXCEL'


class Status2(Enum):
    PROCESSING = 'PROCESSING'
    REPORT_AVAILABLE = 'REPORT_AVAILABLE'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class Urls(BaseModel):
    apiUrl: Optional[str] = Field(
        None, description='The URL for downloading the report data through the API.'
    )
    browserUrl: Optional[str] = Field(
        None, description='The URL for downloading the report data through a browser.'
    )


class File(BaseModel):
    dateRange: Optional[DateRange] = Field(
        None,
        description='The date range for which the file has report data. The date range will always be the absolute date range for which the report is run.',
    )
    etag: Optional[str] = Field(None, description='Etag of this resource.')
    fileName: Optional[str] = Field(None, description='The filename of the file.')
    format: Optional[Format] = Field(
        None,
        description='The output format of the report. Only available once the file is available.',
    )
    id: Optional[str] = Field(None, description='The unique ID of this report file.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#file".',
    )
    lastModifiedTime: Optional[str] = Field(
        None,
        description='The timestamp in milliseconds since epoch when this file was last modified.',
    )
    reportId: Optional[str] = Field(
        None, description='The ID of the report this file was generated from.'
    )
    status: Optional[Status2] = Field(
        None, description='The status of the report file.'
    )
    urls: Optional[Urls] = Field(
        None, description='The URLs where the completed report file can be downloaded.'
    )


class FileList(BaseModel):
    etag: Optional[str] = Field(None, description='Etag of this resource.')
    items: Optional[List[File]] = Field(
        None, description='The files returned in this response.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#fileList".',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through files. To retrieve the next page of results, set the next request\'s "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.',
    )


class Flight(BaseModel):
    endDate: Optional[date] = None
    rateOrCost: Optional[str] = Field(None, description='Rate or cost of this flight.')
    startDate: Optional[date] = None
    units: Optional[str] = Field(None, description='Units of this flight.')


class FloodlightActivitiesGenerateTagResponse(BaseModel):
    floodlightActivityTag: Optional[str] = Field(
        None,
        description='Generated tag for this Floodlight activity. For global site tags, this is the event snippet.',
    )
    globalSiteTagGlobalSnippet: Optional[str] = Field(
        None,
        description='The global snippet section of a global site tag. The global site tag sets new cookies on your domain, which will store a unique identifier for a user or the ad click that brought the user to your site. Learn more.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivitiesGenerateTagResponse".',
    )


class CacheBustingType(Enum):
    JAVASCRIPT = 'JAVASCRIPT'
    ACTIVE_SERVER_PAGE = 'ACTIVE_SERVER_PAGE'
    JSP = 'JSP'
    PHP = 'PHP'
    COLD_FUSION = 'COLD_FUSION'


class CountingMethod(Enum):
    STANDARD_COUNTING = 'STANDARD_COUNTING'
    UNIQUE_COUNTING = 'UNIQUE_COUNTING'
    SESSION_COUNTING = 'SESSION_COUNTING'
    TRANSACTIONS_COUNTING = 'TRANSACTIONS_COUNTING'
    ITEMS_SOLD_COUNTING = 'ITEMS_SOLD_COUNTING'


class FloodlightActivityGroupType(Enum):
    COUNTER = 'COUNTER'
    SALE = 'SALE'


class FloodlightTagType(Enum):
    IFRAME = 'IFRAME'
    IMAGE = 'IMAGE'
    GLOBAL_SITE_TAG = 'GLOBAL_SITE_TAG'


class Status3(Enum):
    ACTIVE = 'ACTIVE'
    ARCHIVED_AND_DISABLED = 'ARCHIVED_AND_DISABLED'
    ARCHIVED = 'ARCHIVED'
    DISABLED_POLICY = 'DISABLED_POLICY'


class TagFormat(Enum):
    HTML = 'HTML'
    XHTML = 'XHTML'


class UserDefinedVariableType(Enum):
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    U10 = 'U10'
    U11 = 'U11'
    U12 = 'U12'
    U13 = 'U13'
    U14 = 'U14'
    U15 = 'U15'
    U16 = 'U16'
    U17 = 'U17'
    U18 = 'U18'
    U19 = 'U19'
    U20 = 'U20'
    U21 = 'U21'
    U22 = 'U22'
    U23 = 'U23'
    U24 = 'U24'
    U25 = 'U25'
    U26 = 'U26'
    U27 = 'U27'
    U28 = 'U28'
    U29 = 'U29'
    U30 = 'U30'
    U31 = 'U31'
    U32 = 'U32'
    U33 = 'U33'
    U34 = 'U34'
    U35 = 'U35'
    U36 = 'U36'
    U37 = 'U37'
    U38 = 'U38'
    U39 = 'U39'
    U40 = 'U40'
    U41 = 'U41'
    U42 = 'U42'
    U43 = 'U43'
    U44 = 'U44'
    U45 = 'U45'
    U46 = 'U46'
    U47 = 'U47'
    U48 = 'U48'
    U49 = 'U49'
    U50 = 'U50'
    U51 = 'U51'
    U52 = 'U52'
    U53 = 'U53'
    U54 = 'U54'
    U55 = 'U55'
    U56 = 'U56'
    U57 = 'U57'
    U58 = 'U58'
    U59 = 'U59'
    U60 = 'U60'
    U61 = 'U61'
    U62 = 'U62'
    U63 = 'U63'
    U64 = 'U64'
    U65 = 'U65'
    U66 = 'U66'
    U67 = 'U67'
    U68 = 'U68'
    U69 = 'U69'
    U70 = 'U70'
    U71 = 'U71'
    U72 = 'U72'
    U73 = 'U73'
    U74 = 'U74'
    U75 = 'U75'
    U76 = 'U76'
    U77 = 'U77'
    U78 = 'U78'
    U79 = 'U79'
    U80 = 'U80'
    U81 = 'U81'
    U82 = 'U82'
    U83 = 'U83'
    U84 = 'U84'
    U85 = 'U85'
    U86 = 'U86'
    U87 = 'U87'
    U88 = 'U88'
    U89 = 'U89'
    U90 = 'U90'
    U91 = 'U91'
    U92 = 'U92'
    U93 = 'U93'
    U94 = 'U94'
    U95 = 'U95'
    U96 = 'U96'
    U97 = 'U97'
    U98 = 'U98'
    U99 = 'U99'
    U100 = 'U100'


class FloodlightActivityDynamicTag(BaseModel):
    id: Optional[str] = Field(
        None,
        description='ID of this dynamic tag. This is a read-only, auto-generated field.',
    )
    name: Optional[str] = Field(None, description='Name of this tag.')
    tag: Optional[str] = Field(None, description='Tag code.')


class Type6(Enum):
    COUNTER = 'COUNTER'
    SALE = 'SALE'


class FloodlightActivityGroup(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this floodlight activity group. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description="Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration's advertiser or from the existing activity group's advertiser.",
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    floodlightConfigurationId: Optional[str] = Field(
        None,
        description='Floodlight configuration ID of this floodlight activity group. This is a required field.',
    )
    floodlightConfigurationIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this floodlight activity group. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this floodlight activity group. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivityGroup".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.',
    )
    tagString: Optional[str] = Field(
        None,
        description='Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.',
    )
    type: Optional[Type6] = Field(
        None,
        description='Type of the floodlight activity group. This is a required field that is read-only after insertion.',
    )


class FloodlightActivityGroupsListResponse(BaseModel):
    floodlightActivityGroups: Optional[List[FloodlightActivityGroup]] = Field(
        None, description='Floodlight activity group collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivityGroupsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class FloodlightActivityPublisherDynamicTag(BaseModel):
    clickThrough: Optional[bool] = Field(
        None, description='Whether this tag is applicable only for click-throughs.'
    )
    directorySiteId: Optional[str] = Field(
        None,
        description='Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.',
    )
    dynamicTag: Optional[FloodlightActivityDynamicTag] = Field(
        None, description='Dynamic floodlight tag.'
    )
    siteId: Optional[str] = Field(None, description='Site ID of this dynamic tag.')
    siteIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the site. This is a read-only, auto-generated field.',
    )
    viewThrough: Optional[bool] = Field(
        None, description='Whether this tag is applicable only for view-throughs.'
    )


class FirstDayOfWeek(Enum):
    MONDAY = 'MONDAY'
    SUNDAY = 'SUNDAY'


class NaturalSearchConversionAttributionOption(Enum):
    EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = (
        'EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION'
    )
    INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = (
        'INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION'
    )
    INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION = (
        'INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION'
    )


class FrequencyCap(BaseModel):
    duration: Optional[str] = Field(
        None,
        description='Duration of time, in seconds, for this frequency cap. The maximum duration is 90 days. Acceptable values are 1 to 7776000, inclusive.',
    )
    impressions: Optional[str] = Field(
        None,
        description='Number of times an individual user can be served the ad within the specified duration. Acceptable values are 1 to 15, inclusive.',
    )


class PositionOption(Enum):
    CENTERED = 'CENTERED'
    DISTANCE_FROM_TOP_LEFT_CORNER = 'DISTANCE_FROM_TOP_LEFT_CORNER'


class FsCommand(BaseModel):
    left: Optional[int] = Field(
        None,
        description='Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.',
    )
    positionOption: Optional[PositionOption] = Field(
        None, description='Position in the browser where the window will open.'
    )
    top: Optional[int] = Field(
        None,
        description='Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.',
    )
    windowHeight: Optional[int] = Field(None, description='Height of the window.')
    windowWidth: Optional[int] = Field(None, description='Width of the window.')


class Type7(Enum):
    PLANNING_PLACEMENT_TYPE_REGULAR = 'PLANNING_PLACEMENT_TYPE_REGULAR'
    PLANNING_PLACEMENT_TYPE_CREDIT = 'PLANNING_PLACEMENT_TYPE_CREDIT'


class KeyValueTargetingExpression(BaseModel):
    expression: Optional[str] = Field(
        None, description='Keyword expression being targeted by the ad.'
    )


class Language(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Language ID of this language. This is the ID used for targeting and generating reports.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#language".',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Format of language code is an ISO 639 two-letter language code optionally followed by an underscore followed by an ISO 3166 code. Examples are "en" for English or "zh_CN" for Simplified Chinese.',
    )
    name: Optional[str] = Field(None, description='Name of this language.')


class LanguageTargeting(BaseModel):
    languages: Optional[List[Language]] = Field(
        None,
        description='Languages that this ad targets. For each language only languageId is required. The other fields are populated automatically when the ad is inserted or updated.',
    )


class LanguagesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#languagesListResponse".',
    )
    languages: Optional[List[Language]] = Field(
        None, description='Language collection.'
    )


class LastModifiedInfo(BaseModel):
    time: Optional[str] = Field(
        None, description='Timestamp of the last change in milliseconds since epoch.'
    )


class Operator(Enum):
    NUM_EQUALS = 'NUM_EQUALS'
    NUM_LESS_THAN = 'NUM_LESS_THAN'
    NUM_LESS_THAN_EQUAL = 'NUM_LESS_THAN_EQUAL'
    NUM_GREATER_THAN = 'NUM_GREATER_THAN'
    NUM_GREATER_THAN_EQUAL = 'NUM_GREATER_THAN_EQUAL'
    STRING_EQUALS = 'STRING_EQUALS'
    STRING_CONTAINS = 'STRING_CONTAINS'


class Type8(Enum):
    CUSTOM_VARIABLE_TERM = 'CUSTOM_VARIABLE_TERM'
    LIST_MEMBERSHIP_TERM = 'LIST_MEMBERSHIP_TERM'
    REFERRER_TERM = 'REFERRER_TERM'


class ListPopulationTerm(BaseModel):
    contains: Optional[bool] = Field(
        None,
        description='Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.',
    )
    negation: Optional[bool] = Field(
        None,
        description='Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.',
    )
    operator: Optional[Operator] = Field(
        None,
        description='Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.',
    )
    remarketingListId: Optional[str] = Field(
        None,
        description='ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.',
    )
    type: Optional[Type8] = Field(
        None,
        description='List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.',
    )
    value: Optional[str] = Field(
        None,
        description='Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.',
    )
    variableFriendlyName: Optional[str] = Field(
        None,
        description="Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.",
    )
    variableName: Optional[str] = Field(
        None,
        description='Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.',
    )


class ListTargetingExpression(BaseModel):
    expression: Optional[str] = Field(
        None,
        description='Expression describing which lists are being targeted by the ad.',
    )


class LookbackConfiguration(BaseModel):
    clickDuration: Optional[int] = Field(
        None,
        description='Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.',
    )
    postImpressionActivitiesDuration: Optional[int] = Field(
        None,
        description='Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.',
    )


class Metric(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#metric.',
    )
    name: Optional[str] = Field(
        None, description='The metric name, e.g. dfa:impressions'
    )


class Metro(BaseModel):
    countryCode: Optional[str] = Field(
        None,
        description='Country code of the country to which this metro region belongs.',
    )
    countryDartId: Optional[str] = Field(
        None, description='DART ID of the country to which this metro region belongs.'
    )
    dartId: Optional[str] = Field(None, description='DART ID of this metro region.')
    dmaId: Optional[str] = Field(
        None,
        description='DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#metro".',
    )
    metroCode: Optional[str] = Field(
        None,
        description='Metro code of this metro region. This is equivalent to dma_id.',
    )
    name: Optional[str] = Field(None, description='Name of this metro region.')


class MetrosListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#metrosListResponse".',
    )
    metros: Optional[List[Metro]] = Field(None, description='Metro collection.')


class Directory(Enum):
    UNKNOWN = 'UNKNOWN'
    APPLE_APP_STORE = 'APPLE_APP_STORE'
    GOOGLE_PLAY_STORE = 'GOOGLE_PLAY_STORE'
    ROKU_APP_STORE = 'ROKU_APP_STORE'
    AMAZON_FIRETV_APP_STORE = 'AMAZON_FIRETV_APP_STORE'
    PLAYSTATION_APP_STORE = 'PLAYSTATION_APP_STORE'
    APPLE_TV_APP_STORE = 'APPLE_TV_APP_STORE'
    XBOX_APP_STORE = 'XBOX_APP_STORE'
    SAMSUNG_TV_APP_STORE = 'SAMSUNG_TV_APP_STORE'
    ANDROID_TV_APP_STORE = 'ANDROID_TV_APP_STORE'
    GENERIC_CTV_APP_STORE = 'GENERIC_CTV_APP_STORE'


class MobileApp(BaseModel):
    directory: Optional[Directory] = Field(None, description='Mobile app directory.')
    id: Optional[str] = Field(None, description='ID of this mobile app.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileApp".',
    )
    publisherName: Optional[str] = Field(None, description='Publisher name.')
    title: Optional[str] = Field(None, description='Title of this mobile app.')


class MobileAppsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileAppsListResponse".',
    )
    mobileApps: Optional[List[MobileApp]] = Field(
        None, description='Mobile apps collection.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class MobileCarrier(BaseModel):
    countryCode: Optional[str] = Field(
        None,
        description='Country code of the country to which this mobile carrier belongs.',
    )
    countryDartId: Optional[str] = Field(
        None, description='DART ID of the country to which this mobile carrier belongs.'
    )
    id: Optional[str] = Field(None, description='ID of this mobile carrier.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileCarrier".',
    )
    name: Optional[str] = Field(None, description='Name of this mobile carrier.')


class MobileCarriersListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileCarriersListResponse".',
    )
    mobileCarriers: Optional[List[MobileCarrier]] = Field(
        None, description='Mobile carrier collection.'
    )


class Status4(Enum):
    NONE = 'NONE'
    ASSIGNED = 'ASSIGNED'
    ALL = 'ALL'


class ObjectFilter(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#objectFilter".',
    )
    objectIds: Optional[List[str]] = Field(
        None,
        description='Applicable when status is ASSIGNED. The user has access to objects with these object IDs.',
    )
    status: Optional[Status4] = Field(
        None,
        description='Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.',
    )


class OffsetPosition(BaseModel):
    left: Optional[int] = Field(
        None, description='Offset distance from left side of an asset or a window.'
    )
    top: Optional[int] = Field(
        None, description='Offset distance from top side of an asset or a window.'
    )


class OmnitureSettings(BaseModel):
    omnitureCostDataEnabled: Optional[bool] = Field(
        None,
        description='Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.',
    )
    omnitureIntegrationEnabled: Optional[bool] = Field(
        None,
        description='Whether Omniture integration is enabled. This property can be enabled only when the "Advanced Ad Serving" account setting is enabled.',
    )


class OperatingSystem(BaseModel):
    dartId: Optional[str] = Field(
        None,
        description='DART ID of this operating system. This is the ID used for targeting.',
    )
    desktop: Optional[bool] = Field(
        None, description='Whether this operating system is for desktop.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystem".',
    )
    mobile: Optional[bool] = Field(
        None, description='Whether this operating system is for mobile.'
    )
    name: Optional[str] = Field(None, description='Name of this operating system.')


class OperatingSystemVersion(BaseModel):
    id: Optional[str] = Field(None, description='ID of this operating system version.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemVersion".',
    )
    majorVersion: Optional[str] = Field(
        None,
        description='Major version (leftmost number) of this operating system version.',
    )
    minorVersion: Optional[str] = Field(
        None,
        description='Minor version (number after the first dot) of this operating system version.',
    )
    name: Optional[str] = Field(
        None, description='Name of this operating system version.'
    )
    operatingSystem: Optional[OperatingSystem] = Field(
        None, description='Operating system of this operating system version.'
    )


class OperatingSystemVersionsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemVersionsListResponse".',
    )
    operatingSystemVersions: Optional[List[OperatingSystemVersion]] = Field(
        None, description='Operating system version collection.'
    )


class OperatingSystemsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemsListResponse".',
    )
    operatingSystems: Optional[List[OperatingSystem]] = Field(
        None, description='Operating system collection.'
    )


class OptimizationActivity(BaseModel):
    floodlightActivityId: Optional[str] = Field(
        None,
        description='Floodlight activity ID of this optimization activity. This is a required field.',
    )
    floodlightActivityIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the floodlight activity. This is a read-only, auto-generated field.',
    )
    weight: Optional[int] = Field(
        None,
        description='Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.',
    )


class ContactType(Enum):
    PLANNING_ORDER_CONTACT_BUYER_CONTACT = 'PLANNING_ORDER_CONTACT_BUYER_CONTACT'
    PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT = (
        'PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT'
    )
    PLANNING_ORDER_CONTACT_SELLER_CONTACT = 'PLANNING_ORDER_CONTACT_SELLER_CONTACT'


class OrderContact(BaseModel):
    contactInfo: Optional[str] = Field(
        None,
        description='Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.',
    )
    contactName: Optional[str] = Field(None, description='Name of this contact.')
    contactTitle: Optional[str] = Field(None, description='Title of this contact.')
    contactType: Optional[ContactType] = Field(
        None, description='Type of this contact.'
    )
    signatureUserProfileId: Optional[str] = Field(
        None,
        description='ID of the user profile containing the signature that will be embedded into order documents.',
    )


class Type9(Enum):
    PLANNING_ORDER_TYPE_INSERTION_ORDER = 'PLANNING_ORDER_TYPE_INSERTION_ORDER'
    PLANNING_ORDER_TYPE_CHANGE_ORDER = 'PLANNING_ORDER_TYPE_CHANGE_ORDER'


class OrderDocument(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Account ID of this order document.'
    )
    advertiserId: Optional[str] = Field(
        None, description='Advertiser ID of this order document.'
    )
    amendedOrderDocumentId: Optional[str] = Field(
        None,
        description='The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved.',
    )
    approvedByUserProfileIds: Optional[List[str]] = Field(
        None, description='IDs of users who have approved this order document.'
    )
    cancelled: Optional[bool] = Field(
        None, description='Whether this order document is cancelled.'
    )
    createdInfo: Optional[LastModifiedInfo] = Field(
        None, description='Information about the creation of this order document.'
    )
    effectiveDate: Optional[date] = None
    id: Optional[str] = Field(None, description='ID of this order document.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#orderDocument".',
    )
    lastSentRecipients: Optional[List[str]] = Field(
        None,
        description='List of email addresses that received the last sent document.',
    )
    lastSentTime: Optional[datetime] = None
    orderId: Optional[str] = Field(
        None, description='ID of the order from which this order document is created.'
    )
    projectId: Optional[str] = Field(
        None, description='Project ID of this order document.'
    )
    signed: Optional[bool] = Field(
        None, description='Whether this order document has been signed.'
    )
    subaccountId: Optional[str] = Field(
        None, description='Subaccount ID of this order document.'
    )
    title: Optional[str] = Field(None, description='Title of this order document.')
    type: Optional[Type9] = Field(None, description='Type of this order document')


class OrderDocumentsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#orderDocumentsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    orderDocuments: Optional[List[OrderDocument]] = Field(
        None, description='Order document collection'
    )


class PathMatchPosition(Enum):
    PATH_MATCH_POSITION_UNSPECIFIED = 'PATH_MATCH_POSITION_UNSPECIFIED'
    ANY = 'ANY'
    FIRST = 'FIRST'
    LAST = 'LAST'


class PathReportCompatibleFields(BaseModel):
    channelGroupings: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "channelGroupings" section of the report.',
    )
    dimensions: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensions" section of the report.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#pathReportCompatibleFields.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "metricNames" section of the report.',
    )
    pathFilters: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "pathFilters" section of the report.',
    )


class PathReportDimensionValue(BaseModel):
    dimensionName: Optional[str] = Field(None, description='The name of the dimension.')
    ids: Optional[List[str]] = Field(
        None, description="The possible ID's associated with the value if available."
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#pathReportDimensionValue.',
    )
    matchType: Optional[MatchType] = Field(
        None,
        description="Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.",
    )
    values: Optional[List[str]] = Field(
        None, description='The possible values of the dimension.'
    )


class PathToConversionReportCompatibleFields(BaseModel):
    conversionDimensions: Optional[List[Dimension]] = Field(
        None,
        description='Conversion dimensions which are compatible to be selected in the "conversionDimensions" section of the report.',
    )
    customFloodlightVariables: Optional[List[Dimension]] = Field(
        None,
        description='Custom floodlight variables which are compatible to be selected in the "customFloodlightVariables" section of the report.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "metricNames" section of the report.',
    )
    perInteractionDimensions: Optional[List[Dimension]] = Field(
        None,
        description='Per-interaction dimensions which are compatible to be selected in the "perInteractionDimensions" section of the report.',
    )


class PaymentSource(Enum):
    PLACEMENT_AGENCY_PAID = 'PLACEMENT_AGENCY_PAID'
    PLACEMENT_PUBLISHER_PAID = 'PLACEMENT_PUBLISHER_PAID'


class Status5(Enum):
    PENDING_REVIEW = 'PENDING_REVIEW'
    PAYMENT_ACCEPTED = 'PAYMENT_ACCEPTED'
    PAYMENT_REJECTED = 'PAYMENT_REJECTED'
    ACKNOWLEDGE_REJECTION = 'ACKNOWLEDGE_REJECTION'
    ACKNOWLEDGE_ACCEPTANCE = 'ACKNOWLEDGE_ACCEPTANCE'
    DRAFT = 'DRAFT'


class TagFormat1(Enum):
    PLACEMENT_TAG_STANDARD = 'PLACEMENT_TAG_STANDARD'
    PLACEMENT_TAG_IFRAME_JAVASCRIPT = 'PLACEMENT_TAG_IFRAME_JAVASCRIPT'
    PLACEMENT_TAG_IFRAME_ILAYER = 'PLACEMENT_TAG_IFRAME_ILAYER'
    PLACEMENT_TAG_INTERNAL_REDIRECT = 'PLACEMENT_TAG_INTERNAL_REDIRECT'
    PLACEMENT_TAG_JAVASCRIPT = 'PLACEMENT_TAG_JAVASCRIPT'
    PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT = (
        'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT'
    )
    PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT = (
        'PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT'
    )
    PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT = 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT'
    PLACEMENT_TAG_CLICK_COMMANDS = 'PLACEMENT_TAG_CLICK_COMMANDS'
    PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH = 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH'
    PLACEMENT_TAG_TRACKING = 'PLACEMENT_TAG_TRACKING'
    PLACEMENT_TAG_TRACKING_IFRAME = 'PLACEMENT_TAG_TRACKING_IFRAME'
    PLACEMENT_TAG_TRACKING_JAVASCRIPT = 'PLACEMENT_TAG_TRACKING_JAVASCRIPT'
    PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3 = (
        'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3'
    )
    PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY = 'PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY'
    PLACEMENT_TAG_JAVASCRIPT_LEGACY = 'PLACEMENT_TAG_JAVASCRIPT_LEGACY'
    PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY = (
        'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY'
    )
    PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY = (
        'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY'
    )
    PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4 = (
        'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4'
    )
    PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT = (
        'PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT'
    )


class VpaidAdapterChoice(Enum):
    DEFAULT = 'DEFAULT'
    FLASH = 'FLASH'
    HTML5 = 'HTML5'
    BOTH = 'BOTH'


class PlacementAssignment(BaseModel):
    active: Optional[bool] = Field(
        None,
        description="Whether this placement assignment is active. When true, the placement will be included in the ad's rotation.",
    )
    placementId: Optional[str] = Field(
        None,
        description='ID of the placement to be assigned. This is a required field.',
    )
    placementIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the placement. This is a read-only, auto-generated field.',
    )
    sslRequired: Optional[bool] = Field(
        None,
        description='Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.',
    )


class PlacementGroupType(Enum):
    PLACEMENT_PACKAGE = 'PLACEMENT_PACKAGE'
    PLACEMENT_ROADBLOCK = 'PLACEMENT_ROADBLOCK'


class PlacementStrategy(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this placement strategy.This is a read-only field that can be left blank.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this placement strategy. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementStrategy".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this placement strategy. This is a required field. It must be less than 256 characters long and unique among placement strategies of the same account.',
    )


class PlatformType(BaseModel):
    id: Optional[str] = Field(None, description='ID of this platform type.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#platformType".',
    )
    name: Optional[str] = Field(None, description='Name of this platform type.')


class PlatformTypesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#platformTypesListResponse".',
    )
    platformTypes: Optional[List[PlatformType]] = Field(
        None, description='Platform type collection.'
    )


class PositionType(Enum):
    CENTER = 'CENTER'
    COORDINATES = 'COORDINATES'


class PostalCode(BaseModel):
    code: Optional[str] = Field(
        None, description='Postal code. This is equivalent to the id field.'
    )
    countryCode: Optional[str] = Field(
        None,
        description='Country code of the country to which this postal code belongs.',
    )
    countryDartId: Optional[str] = Field(
        None, description='DART ID of the country to which this postal code belongs.'
    )
    id: Optional[str] = Field(None, description='ID of this postal code.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#postalCode".',
    )


class PostalCodesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#postalCodesListResponse".',
    )
    postalCodes: Optional[List[PostalCode]] = Field(
        None, description='Postal code collection.'
    )


class CapCostType(Enum):
    PLANNING_PLACEMENT_CAP_COST_TYPE_NONE = 'PLANNING_PLACEMENT_CAP_COST_TYPE_NONE'
    PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY = (
        'PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY'
    )
    PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE = (
        'PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE'
    )


class GroupType(Enum):
    PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE = 'PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE'
    PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK = 'PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK'


class PricingType(Enum):
    PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS = (
        'PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS'
    )
    PLANNING_PLACEMENT_PRICING_TYPE_CPM = 'PLANNING_PLACEMENT_PRICING_TYPE_CPM'
    PLANNING_PLACEMENT_PRICING_TYPE_CLICKS = 'PLANNING_PLACEMENT_PRICING_TYPE_CLICKS'
    PLANNING_PLACEMENT_PRICING_TYPE_CPC = 'PLANNING_PLACEMENT_PRICING_TYPE_CPC'
    PLANNING_PLACEMENT_PRICING_TYPE_CPA = 'PLANNING_PLACEMENT_PRICING_TYPE_CPA'
    PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS = (
        'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS'
    )
    PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS = (
        'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS'
    )
    PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW = (
        'PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW'
    )


class Pricing(BaseModel):
    capCostType: Optional[CapCostType] = Field(
        None, description='Cap cost type of this inventory item.'
    )
    endDate: Optional[date] = None
    flights: Optional[List[Flight]] = Field(
        None,
        description='Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.',
    )
    groupType: Optional[GroupType] = Field(
        None,
        description='Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.',
    )
    pricingType: Optional[PricingType] = Field(
        None, description='Pricing type of this inventory item.'
    )
    startDate: Optional[date] = None


class CapCostOption(Enum):
    CAP_COST_NONE = 'CAP_COST_NONE'
    CAP_COST_MONTHLY = 'CAP_COST_MONTHLY'
    CAP_COST_CUMULATIVE = 'CAP_COST_CUMULATIVE'


class PricingType1(Enum):
    PRICING_TYPE_CPM = 'PRICING_TYPE_CPM'
    PRICING_TYPE_CPC = 'PRICING_TYPE_CPC'
    PRICING_TYPE_CPA = 'PRICING_TYPE_CPA'
    PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 'PRICING_TYPE_FLAT_RATE_IMPRESSIONS'
    PRICING_TYPE_FLAT_RATE_CLICKS = 'PRICING_TYPE_FLAT_RATE_CLICKS'
    PRICING_TYPE_CPM_ACTIVEVIEW = 'PRICING_TYPE_CPM_ACTIVEVIEW'


class PricingSchedulePricingPeriod(BaseModel):
    endDate: Optional[date] = None
    pricingComment: Optional[str] = Field(
        None, description='Comments for this pricing period.'
    )
    rateOrCostNanos: Optional[str] = Field(
        None,
        description='Rate or cost of this pricing period in nanos (i.e., multipled by 1000000000). Acceptable values are 0 to 1000000000000000000, inclusive.',
    )
    startDate: Optional[date] = None
    units: Optional[str] = Field(
        None,
        description='Units of this pricing period. Acceptable values are 0 to 10000000000, inclusive.',
    )


class AudienceAgeGroup(Enum):
    PLANNING_AUDIENCE_AGE_18_24 = 'PLANNING_AUDIENCE_AGE_18_24'
    PLANNING_AUDIENCE_AGE_25_34 = 'PLANNING_AUDIENCE_AGE_25_34'
    PLANNING_AUDIENCE_AGE_35_44 = 'PLANNING_AUDIENCE_AGE_35_44'
    PLANNING_AUDIENCE_AGE_45_54 = 'PLANNING_AUDIENCE_AGE_45_54'
    PLANNING_AUDIENCE_AGE_55_64 = 'PLANNING_AUDIENCE_AGE_55_64'
    PLANNING_AUDIENCE_AGE_65_OR_MORE = 'PLANNING_AUDIENCE_AGE_65_OR_MORE'
    PLANNING_AUDIENCE_AGE_UNKNOWN = 'PLANNING_AUDIENCE_AGE_UNKNOWN'


class AudienceGender(Enum):
    PLANNING_AUDIENCE_GENDER_MALE = 'PLANNING_AUDIENCE_GENDER_MALE'
    PLANNING_AUDIENCE_GENDER_FEMALE = 'PLANNING_AUDIENCE_GENDER_FEMALE'


class Project(BaseModel):
    accountId: Optional[str] = Field(None, description='Account ID of this project.')
    advertiserId: Optional[str] = Field(
        None, description='Advertiser ID of this project.'
    )
    audienceAgeGroup: Optional[AudienceAgeGroup] = Field(
        None, description='Audience age group of this project.'
    )
    audienceGender: Optional[AudienceGender] = Field(
        None, description='Audience gender of this project.'
    )
    budget: Optional[str] = Field(
        None,
        description='Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.',
    )
    clientBillingCode: Optional[str] = Field(
        None, description='Client billing code of this project.'
    )
    clientName: Optional[str] = Field(None, description='Name of the project client.')
    endDate: Optional[date] = None
    id: Optional[str] = Field(
        None,
        description='ID of this project. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#project".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this project.',
    )
    name: Optional[str] = Field(None, description='Name of this project.')
    overview: Optional[str] = Field(None, description='Overview of this project.')
    startDate: Optional[date] = None
    subaccountId: Optional[str] = Field(
        None, description='Subaccount ID of this project.'
    )
    targetClicks: Optional[str] = Field(
        None, description='Number of clicks that the advertiser is targeting.'
    )
    targetConversions: Optional[str] = Field(
        None, description='Number of conversions that the advertiser is targeting.'
    )
    targetCpaNanos: Optional[str] = Field(
        None, description='CPA that the advertiser is targeting.'
    )
    targetCpcNanos: Optional[str] = Field(
        None, description='CPC that the advertiser is targeting.'
    )
    targetCpmActiveViewNanos: Optional[str] = Field(
        None, description='vCPM from Active View that the advertiser is targeting.'
    )
    targetCpmNanos: Optional[str] = Field(
        None, description='CPM that the advertiser is targeting.'
    )
    targetImpressions: Optional[str] = Field(
        None, description='Number of impressions that the advertiser is targeting.'
    )


class ProjectsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#projectsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    projects: Optional[List[Project]] = Field(None, description='Project collection.')


class ReachReportCompatibleFields(BaseModel):
    dimensionFilters: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.',
    )
    dimensions: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensions" section of the report.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "metricNames" section of the report.',
    )
    pivotedActivityMetrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected as activity metrics to pivot on in the "activities" section of the report.',
    )
    reachByFrequencyMetrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "reachByFrequencyMetricNames" section of the report.',
    )


class DeliveryType(Enum):
    LINK = 'LINK'
    ATTACHMENT = 'ATTACHMENT'


class Recipient(BaseModel):
    deliveryType: Optional[DeliveryType] = Field(
        None, description='The delivery type for the recipient.'
    )
    email: Optional[str] = Field(
        None, description='The email address of the recipient.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#recipient.',
    )


class Region(BaseModel):
    countryCode: Optional[str] = Field(
        None, description='Country code of the country to which this region belongs.'
    )
    countryDartId: Optional[str] = Field(
        None, description='DART ID of the country to which this region belongs.'
    )
    dartId: Optional[str] = Field(None, description='DART ID of this region.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#region".',
    )
    name: Optional[str] = Field(None, description='Name of this region.')
    regionCode: Optional[str] = Field(None, description='Region code.')


class RegionsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#regionsListResponse".',
    )
    regions: Optional[List[Region]] = Field(None, description='Region collection.')


class ListSource(Enum):
    REMARKETING_LIST_SOURCE_OTHER = 'REMARKETING_LIST_SOURCE_OTHER'
    REMARKETING_LIST_SOURCE_ADX = 'REMARKETING_LIST_SOURCE_ADX'
    REMARKETING_LIST_SOURCE_DFP = 'REMARKETING_LIST_SOURCE_DFP'
    REMARKETING_LIST_SOURCE_XFP = 'REMARKETING_LIST_SOURCE_XFP'
    REMARKETING_LIST_SOURCE_DFA = 'REMARKETING_LIST_SOURCE_DFA'
    REMARKETING_LIST_SOURCE_GA = 'REMARKETING_LIST_SOURCE_GA'
    REMARKETING_LIST_SOURCE_YOUTUBE = 'REMARKETING_LIST_SOURCE_YOUTUBE'
    REMARKETING_LIST_SOURCE_DBM = 'REMARKETING_LIST_SOURCE_DBM'
    REMARKETING_LIST_SOURCE_GPLUS = 'REMARKETING_LIST_SOURCE_GPLUS'
    REMARKETING_LIST_SOURCE_DMP = 'REMARKETING_LIST_SOURCE_DMP'
    REMARKETING_LIST_SOURCE_PLAY_STORE = 'REMARKETING_LIST_SOURCE_PLAY_STORE'


class RemarketingListShare(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingListShare".',
    )
    remarketingListId: Optional[str] = Field(
        None,
        description='Remarketing list ID. This is a read-only, auto-generated field.',
    )
    sharedAccountIds: Optional[List[str]] = Field(
        None, description='Accounts that the remarketing list is shared with.'
    )
    sharedAdvertiserIds: Optional[List[str]] = Field(
        None, description='Advertisers that the remarketing list is shared with.'
    )


class Dimension1(Enum):
    ADVERTISER = 'ADVERTISER'
    CAMPAIGN = 'CAMPAIGN'
    SITE_BY_ADVERTISER = 'SITE_BY_ADVERTISER'
    SITE_BY_CAMPAIGN = 'SITE_BY_CAMPAIGN'


class EmailOwnerDeliveryType(Enum):
    LINK = 'LINK'
    ATTACHMENT = 'ATTACHMENT'


class Delivery(BaseModel):
    emailOwner: Optional[bool] = Field(
        None, description='Whether the report should be emailed to the report owner.'
    )
    emailOwnerDeliveryType: Optional[EmailOwnerDeliveryType] = Field(
        None, description='The type of delivery for the owner to receive, if enabled.'
    )
    message: Optional[str] = Field(
        None, description='The message to be sent with each email.'
    )
    recipients: Optional[List[Recipient]] = Field(
        None, description='The list of recipients to which to email the report.'
    )


class ReportProperties(BaseModel):
    includeAttributedIPConversions: Optional[bool] = Field(
        None,
        description='Include conversions that have no cookie, but do have an exposure path.',
    )
    includeUnattributedCookieConversions: Optional[bool] = Field(
        None,
        description='Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.',
    )
    includeUnattributedIPConversions: Optional[bool] = Field(
        None,
        description='Include conversions that have no associated cookies and no exposures. It’s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.',
    )


class ReportProperties1(BaseModel):
    clicksLookbackWindow: Optional[int] = Field(
        None,
        description='CM360 checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.',
    )
    impressionsLookbackWindow: Optional[int] = Field(
        None,
        description='CM360 checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.',
    )
    includeAttributedIPConversions: Optional[bool] = Field(
        None, description='Deprecated: has no effect.'
    )
    includeUnattributedCookieConversions: Optional[bool] = Field(
        None,
        description='Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.',
    )
    includeUnattributedIPConversions: Optional[bool] = Field(
        None,
        description='Include conversions that have no associated cookies and no exposures. It’s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.',
    )
    maximumClickInteractions: Optional[int] = Field(
        None,
        description='The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.',
    )
    maximumImpressionInteractions: Optional[int] = Field(
        None,
        description='The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.',
    )
    maximumInteractionGap: Optional[int] = Field(
        None,
        description='The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90.',
    )
    pivotOnInteractionPath: Optional[bool] = Field(
        None, description='Enable pivoting on interaction path.'
    )


class RepeatsOnWeekDay(Enum):
    SUNDAY = 'SUNDAY'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'


class RunsOnDayOfMonth(Enum):
    DAY_OF_MONTH = 'DAY_OF_MONTH'
    WEEK_OF_MONTH = 'WEEK_OF_MONTH'


class Schedule(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the schedule is active or not. Must be set to either true or false.',
    )
    every: Optional[int] = Field(
        None,
        description='Defines every how many days, weeks or months the report should be run. Needs to be set when "repeats" is either "DAILY", "WEEKLY" or "MONTHLY".',
    )
    expirationDate: Optional[date] = None
    repeats: Optional[str] = Field(
        None,
        description='The interval for which the report is repeated. Note: - "DAILY" also requires field "every" to be set. - "WEEKLY" also requires fields "every" and "repeatsOnWeekDays" to be set. - "MONTHLY" also requires fields "every" and "runsOnDayOfMonth" to be set. ',
    )
    repeatsOnWeekDays: Optional[List[RepeatsOnWeekDay]] = Field(
        None,
        description='List of week days "WEEKLY" on which scheduled reports should run.',
    )
    runsOnDayOfMonth: Optional[RunsOnDayOfMonth] = Field(
        None,
        description='Enum to define for "MONTHLY" scheduled reports whether reports should be repeated on the same day of the month as "startDate" or the same day of the week of the month. Example: If \'startDate\' is Monday, April 2nd 2012 (2012-04-02), "DAY_OF_MONTH" would run subsequent reports on the 2nd of every Month, and "WEEK_OF_MONTH" would run subsequent reports on the first Monday of the month.',
    )
    startDate: Optional[date] = None


class Type10(Enum):
    STANDARD = 'STANDARD'
    REACH = 'REACH'
    PATH_TO_CONVERSION = 'PATH_TO_CONVERSION'
    CROSS_DIMENSION_REACH = 'CROSS_DIMENSION_REACH'
    FLOODLIGHT = 'FLOODLIGHT'
    PATH = 'PATH'
    PATH_ATTRIBUTION = 'PATH_ATTRIBUTION'


class ReportCompatibleFields(BaseModel):
    dimensionFilters: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.',
    )
    dimensions: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensions" section of the report.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#reportCompatibleFields.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "metricNames" section of the report.',
    )
    pivotedActivityMetrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected as activity metrics to pivot on in the "activities" section of the report.',
    )


class ReportsConfiguration(BaseModel):
    exposureToConversionEnabled: Optional[bool] = Field(
        None,
        description='Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.',
    )
    lookbackConfiguration: Optional[LookbackConfiguration] = Field(
        None,
        description='Default lookback windows for new advertisers in this account.',
    )
    reportGenerationTimeZoneId: Optional[str] = Field(
        None,
        description='Report generation time zone ID of this account. This is a required field that can only be changed by a superuser. Acceptable values are: - "1" for "America/New_York" - "2" for "Europe/London" - "3" for "Europe/Paris" - "4" for "Africa/Johannesburg" - "5" for "Asia/Jerusalem" - "6" for "Asia/Shanghai" - "7" for "Asia/Hong_Kong" - "8" for "Asia/Tokyo" - "9" for "Australia/Sydney" - "10" for "Asia/Dubai" - "11" for "America/Los_Angeles" - "12" for "Pacific/Auckland" - "13" for "America/Sao_Paulo" - "16" for "America/Asuncion" - "17" for "America/Chicago" - "18" for "America/Denver" - "19" for "America/St_Johns" - "20" for "Asia/Dhaka" - "21" for "Asia/Jakarta" - "22" for "Asia/Kabul" - "23" for "Asia/Karachi" - "24" for "Asia/Calcutta" - "25" for "Asia/Pyongyang" - "26" for "Asia/Rangoon" - "27" for "Atlantic/Cape_Verde" - "28" for "Atlantic/South_Georgia" - "29" for "Australia/Adelaide" - "30" for "Australia/Lord_Howe" - "31" for "Europe/Moscow" - "32" for "Pacific/Kiritimati" - "35" for "Pacific/Norfolk" - "36" for "Pacific/Tongatapu" ',
    )


class RichMediaExitOverride(BaseModel):
    clickThroughUrl: Optional[ClickThroughUrl] = Field(
        None,
        description='Click-through URL of this rich media exit override. Applicable if the enabled field is set to true.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Whether to use the clickThroughUrl. If false, the creative-level exit will be used.',
    )
    exitId: Optional[str] = Field(
        None,
        description='ID for the override to refer to a specific exit in the creative.',
    )


class Rule(BaseModel):
    assetId: Optional[str] = Field(
        None,
        description='A creativeAssets[].id. This should refer to one of the parent assets in this creative. This is a required field.',
    )
    name: Optional[str] = Field(
        None,
        description='A user-friendly name for this rule. This is a required field.',
    )
    targetingTemplateId: Optional[str] = Field(
        None,
        description='A targeting template ID. The targeting from the targeting template will be used to determine whether this asset should be served. This is a required field.',
    )


class ContactType1(Enum):
    SALES_PERSON = 'SALES_PERSON'
    TRAFFICKER = 'TRAFFICKER'


class SiteContact(BaseModel):
    address: Optional[str] = Field(None, description='Address of this site contact.')
    contactType: Optional[ContactType1] = Field(None, description='Site contact type.')
    email: Optional[str] = Field(
        None,
        description='Email address of this site contact. This is a required field.',
    )
    firstName: Optional[str] = Field(
        None, description='First name of this site contact.'
    )
    id: Optional[str] = Field(
        None,
        description='ID of this site contact. This is a read-only, auto-generated field.',
    )
    lastName: Optional[str] = Field(None, description='Last name of this site contact.')
    phone: Optional[str] = Field(
        None, description='Primary phone number of this site contact.'
    )
    title: Optional[str] = Field(
        None, description='Title or designation of this site contact.'
    )


class VpaidAdapterChoiceTemplate(Enum):
    DEFAULT = 'DEFAULT'
    FLASH = 'FLASH'
    HTML5 = 'HTML5'
    BOTH = 'BOTH'


class SiteTranscodeSetting(BaseModel):
    enabledVideoFormats: Optional[List[int]] = Field(
        None,
        description='Allowlist of video formats to be served to this site template. Set this list to null or empty to serve all video formats.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteTranscodeSetting".',
    )


class Orientation1(Enum):
    ANY = 'ANY'
    LANDSCAPE = 'LANDSCAPE'
    PORTRAIT = 'PORTRAIT'


class Size(BaseModel):
    height: Optional[int] = Field(
        None,
        description='Height of this size. Acceptable values are 0 to 32767, inclusive.',
    )
    iab: Optional[bool] = Field(
        None,
        description='IAB standard size. This is a read-only, auto-generated field.',
    )
    id: Optional[str] = Field(
        None, description='ID of this size. This is a read-only, auto-generated field.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#size".',
    )
    width: Optional[int] = Field(
        None,
        description='Width of this size. Acceptable values are 0 to 32767, inclusive.',
    )


class SizesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#sizesListResponse".',
    )
    sizes: Optional[List[Size]] = Field(None, description='Size collection.')


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class SortedDimension(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#sortedDimension.',
    )
    name: Optional[str] = Field(None, description='The name of the dimension.')
    sortOrder: Optional[SortOrder] = Field(
        None, description='An optional sort order for the dimension column.'
    )


class Subaccount(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='ID of the account that contains this subaccount. This is a read-only field that can be left blank.',
    )
    availablePermissionIds: Optional[List[str]] = Field(
        None,
        description='IDs of the available user role permissions for this subaccount.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this subaccount. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#subaccount".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this subaccount. This is a required field. Must be less than 128 characters long and be unique among subaccounts of the same account.',
    )


class SubaccountsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#subaccountsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    subaccounts: Optional[List[Subaccount]] = Field(
        None, description='Subaccount collection.'
    )


class Format2(Enum):
    PLACEMENT_TAG_STANDARD = 'PLACEMENT_TAG_STANDARD'
    PLACEMENT_TAG_IFRAME_JAVASCRIPT = 'PLACEMENT_TAG_IFRAME_JAVASCRIPT'
    PLACEMENT_TAG_IFRAME_ILAYER = 'PLACEMENT_TAG_IFRAME_ILAYER'
    PLACEMENT_TAG_INTERNAL_REDIRECT = 'PLACEMENT_TAG_INTERNAL_REDIRECT'
    PLACEMENT_TAG_JAVASCRIPT = 'PLACEMENT_TAG_JAVASCRIPT'
    PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT = (
        'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT'
    )
    PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT = (
        'PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT'
    )
    PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT = 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT'
    PLACEMENT_TAG_CLICK_COMMANDS = 'PLACEMENT_TAG_CLICK_COMMANDS'
    PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH = 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH'
    PLACEMENT_TAG_TRACKING = 'PLACEMENT_TAG_TRACKING'
    PLACEMENT_TAG_TRACKING_IFRAME = 'PLACEMENT_TAG_TRACKING_IFRAME'
    PLACEMENT_TAG_TRACKING_JAVASCRIPT = 'PLACEMENT_TAG_TRACKING_JAVASCRIPT'
    PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3 = (
        'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3'
    )
    PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY = 'PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY'
    PLACEMENT_TAG_JAVASCRIPT_LEGACY = 'PLACEMENT_TAG_JAVASCRIPT_LEGACY'
    PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY = (
        'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY'
    )
    PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY = (
        'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY'
    )
    PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4 = (
        'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4'
    )
    PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT = (
        'PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT'
    )


class TagData(BaseModel):
    adId: Optional[str] = Field(
        None,
        description='Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.',
    )
    clickTag: Optional[str] = Field(None, description='Tag string to record a click.')
    creativeId: Optional[str] = Field(
        None,
        description='Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.',
    )
    format: Optional[Format2] = Field(
        None, description='TagData tag format of this tag.'
    )
    impressionTag: Optional[str] = Field(
        None, description='Tag string for serving an ad.'
    )


class KeywordOption(Enum):
    PLACEHOLDER_WITH_LIST_OF_KEYWORDS = 'PLACEHOLDER_WITH_LIST_OF_KEYWORDS'
    IGNORE = 'IGNORE'
    GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD = 'GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD'


class TagSetting(BaseModel):
    additionalKeyValues: Optional[str] = Field(
        None,
        description='Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.',
    )
    includeClickThroughUrls: Optional[bool] = Field(
        None,
        description='Whether static landing page URLs should be included in the tags. This setting applies only to placements.',
    )
    includeClickTracking: Optional[bool] = Field(
        None,
        description='Whether click-tracking string should be included in the tags.',
    )
    keywordOption: Optional[KeywordOption] = Field(
        None,
        description='Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.',
    )


class TagSettings(BaseModel):
    dynamicTagEnabled: Optional[bool] = Field(
        None, description='Whether dynamic floodlight tags are enabled.'
    )
    imageTagEnabled: Optional[bool] = Field(
        None, description='Whether image tags are enabled.'
    )


class TargetWindowOption(Enum):
    NEW_WINDOW = 'NEW_WINDOW'
    CURRENT_WINDOW = 'CURRENT_WINDOW'
    CUSTOM = 'CUSTOM'


class TargetWindow(BaseModel):
    customHtml: Optional[str] = Field(None, description='User-entered value.')
    targetWindowOption: Optional[TargetWindowOption] = Field(
        None,
        description='Type of browser window for which the backup image of the flash creative can be displayed.',
    )


class TargetableRemarketingList(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.',
    )
    active: Optional[bool] = Field(
        None, description='Whether this targetable remarketing list is active.'
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Dimension value for the advertiser ID that owns this targetable remarketing list.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None, description='Dimension value for the ID of the advertiser.'
    )
    description: Optional[str] = Field(
        None, description='Targetable remarketing list description.'
    )
    id: Optional[str] = Field(None, description='Targetable remarketing list ID.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetableRemarketingList".',
    )
    lifeSpan: Optional[str] = Field(
        None,
        description='Number of days that a user should remain in the targetable remarketing list without an impression.',
    )
    listSize: Optional[str] = Field(
        None,
        description='Number of users currently in the list. This is a read-only field.',
    )
    listSource: Optional[ListSource] = Field(
        None,
        description='Product from which this targetable remarketing list was originated.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the targetable remarketing list. Is no greater than 128 characters long.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.',
    )


class TargetableRemarketingListsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetableRemarketingListsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    targetableRemarketingLists: Optional[List[TargetableRemarketingList]] = Field(
        None, description='Targetable remarketing list collection.'
    )


class TechnologyTargeting(BaseModel):
    browsers: Optional[List[Browser]] = Field(
        None,
        description='Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.',
    )
    connectionTypes: Optional[List[ConnectionType]] = Field(
        None,
        description='Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.',
    )
    mobileCarriers: Optional[List[MobileCarrier]] = Field(
        None,
        description='Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.',
    )
    operatingSystemVersions: Optional[List[OperatingSystemVersion]] = Field(
        None,
        description='Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.',
    )
    operatingSystems: Optional[List[OperatingSystem]] = Field(
        None,
        description='Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.',
    )
    platformTypes: Optional[List[PlatformType]] = Field(
        None,
        description='Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.',
    )


class ThirdPartyAuthenticationToken(BaseModel):
    name: Optional[str] = Field(
        None, description='Name of the third-party authentication token.'
    )
    value: Optional[str] = Field(
        None,
        description='Value of the third-party authentication token. This is a read-only, auto-generated field.',
    )


class ThirdPartyUrlType(Enum):
    IMPRESSION = 'IMPRESSION'
    CLICK_TRACKING = 'CLICK_TRACKING'
    VIDEO_START = 'VIDEO_START'
    VIDEO_FIRST_QUARTILE = 'VIDEO_FIRST_QUARTILE'
    VIDEO_MIDPOINT = 'VIDEO_MIDPOINT'
    VIDEO_THIRD_QUARTILE = 'VIDEO_THIRD_QUARTILE'
    VIDEO_COMPLETE = 'VIDEO_COMPLETE'
    VIDEO_MUTE = 'VIDEO_MUTE'
    VIDEO_PAUSE = 'VIDEO_PAUSE'
    VIDEO_REWIND = 'VIDEO_REWIND'
    VIDEO_FULLSCREEN = 'VIDEO_FULLSCREEN'
    VIDEO_STOP = 'VIDEO_STOP'
    VIDEO_CUSTOM = 'VIDEO_CUSTOM'
    SURVEY = 'SURVEY'
    RICH_MEDIA_IMPRESSION = 'RICH_MEDIA_IMPRESSION'
    RICH_MEDIA_RM_IMPRESSION = 'RICH_MEDIA_RM_IMPRESSION'
    RICH_MEDIA_BACKUP_IMPRESSION = 'RICH_MEDIA_BACKUP_IMPRESSION'
    VIDEO_SKIP = 'VIDEO_SKIP'
    VIDEO_PROGRESS = 'VIDEO_PROGRESS'


class ThirdPartyTrackingUrl(BaseModel):
    thirdPartyUrlType: Optional[ThirdPartyUrlType] = Field(
        None,
        description='Third-party URL type for in-stream video and in-stream audio creatives.',
    )
    url: Optional[str] = Field(
        None, description='URL for the specified third-party URL type.'
    )


class TranscodeSetting(BaseModel):
    enabledVideoFormats: Optional[List[int]] = Field(
        None,
        description='Allowlist of video formats to be served to this placement. Set this list to null or empty to serve all video formats.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#transcodeSetting".',
    )


class Registry(Enum):
    OTHER = 'OTHER'
    AD_ID_OFFICIAL = 'AD_ID_OFFICIAL'
    CLEARCAST = 'CLEARCAST'
    DCM = 'DCM'


class UniversalAdId(BaseModel):
    registry: Optional[Registry] = Field(
        None, description='Registry used for the Ad ID value.'
    )
    value: Optional[str] = Field(
        None,
        description='ID value for this creative. Only alphanumeric characters and the following symbols are valid: "_/\\-". Maximum length is 64 characters. Read only when registry is DCM.',
    )


class DataType(Enum):
    STRING = 'STRING'
    NUMBER = 'NUMBER'


class VariableType(Enum):
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    U10 = 'U10'
    U11 = 'U11'
    U12 = 'U12'
    U13 = 'U13'
    U14 = 'U14'
    U15 = 'U15'
    U16 = 'U16'
    U17 = 'U17'
    U18 = 'U18'
    U19 = 'U19'
    U20 = 'U20'
    U21 = 'U21'
    U22 = 'U22'
    U23 = 'U23'
    U24 = 'U24'
    U25 = 'U25'
    U26 = 'U26'
    U27 = 'U27'
    U28 = 'U28'
    U29 = 'U29'
    U30 = 'U30'
    U31 = 'U31'
    U32 = 'U32'
    U33 = 'U33'
    U34 = 'U34'
    U35 = 'U35'
    U36 = 'U36'
    U37 = 'U37'
    U38 = 'U38'
    U39 = 'U39'
    U40 = 'U40'
    U41 = 'U41'
    U42 = 'U42'
    U43 = 'U43'
    U44 = 'U44'
    U45 = 'U45'
    U46 = 'U46'
    U47 = 'U47'
    U48 = 'U48'
    U49 = 'U49'
    U50 = 'U50'
    U51 = 'U51'
    U52 = 'U52'
    U53 = 'U53'
    U54 = 'U54'
    U55 = 'U55'
    U56 = 'U56'
    U57 = 'U57'
    U58 = 'U58'
    U59 = 'U59'
    U60 = 'U60'
    U61 = 'U61'
    U62 = 'U62'
    U63 = 'U63'
    U64 = 'U64'
    U65 = 'U65'
    U66 = 'U66'
    U67 = 'U67'
    U68 = 'U68'
    U69 = 'U69'
    U70 = 'U70'
    U71 = 'U71'
    U72 = 'U72'
    U73 = 'U73'
    U74 = 'U74'
    U75 = 'U75'
    U76 = 'U76'
    U77 = 'U77'
    U78 = 'U78'
    U79 = 'U79'
    U80 = 'U80'
    U81 = 'U81'
    U82 = 'U82'
    U83 = 'U83'
    U84 = 'U84'
    U85 = 'U85'
    U86 = 'U86'
    U87 = 'U87'
    U88 = 'U88'
    U89 = 'U89'
    U90 = 'U90'
    U91 = 'U91'
    U92 = 'U92'
    U93 = 'U93'
    U94 = 'U94'
    U95 = 'U95'
    U96 = 'U96'
    U97 = 'U97'
    U98 = 'U98'
    U99 = 'U99'
    U100 = 'U100'


class UserDefinedVariableConfiguration(BaseModel):
    dataType: Optional[DataType] = Field(
        None, description='Data type for the variable. This is a required field.'
    )
    reportName: Optional[str] = Field(
        None,
        description='User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: ""<>".',
    )
    variableType: Optional[VariableType] = Field(
        None, description='Variable name in the tag. This is a required field.'
    )


class UserProfile(BaseModel):
    accountId: Optional[str] = Field(
        None, description='The account ID to which this profile belongs.'
    )
    accountName: Optional[str] = Field(
        None, description='The account name this profile belongs to.'
    )
    etag: Optional[str] = Field(None, description='Etag of this resource.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userProfile".',
    )
    profileId: Optional[str] = Field(
        None, description='The unique ID of the user profile.'
    )
    subAccountId: Optional[str] = Field(
        None, description='The sub account ID this profile belongs to if applicable.'
    )
    subAccountName: Optional[str] = Field(
        None, description='The sub account name this profile belongs to if applicable.'
    )
    userName: Optional[str] = Field(None, description='The user name.')


class UserProfileList(BaseModel):
    etag: Optional[str] = Field(None, description='Etag of this resource.')
    items: Optional[List[UserProfile]] = Field(
        None, description='The user profiles returned in this response.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userProfileList".',
    )


class Availability(Enum):
    NOT_AVAILABLE_BY_DEFAULT = 'NOT_AVAILABLE_BY_DEFAULT'
    ACCOUNT_BY_DEFAULT = 'ACCOUNT_BY_DEFAULT'
    SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT = 'SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT'
    ACCOUNT_ALWAYS = 'ACCOUNT_ALWAYS'
    SUBACCOUNT_AND_ACCOUNT_ALWAYS = 'SUBACCOUNT_AND_ACCOUNT_ALWAYS'
    USER_PROFILE_ONLY = 'USER_PROFILE_ONLY'


class UserRolePermission(BaseModel):
    availability: Optional[Availability] = Field(
        None, description='Levels of availability for a user role permission.'
    )
    id: Optional[str] = Field(None, description='ID of this user role permission.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermission".',
    )
    name: Optional[str] = Field(None, description='Name of this user role permission.')
    permissionGroupId: Optional[str] = Field(
        None,
        description='ID of the permission group that this user role permission belongs to.',
    )


class UserRolePermissionGroup(BaseModel):
    id: Optional[str] = Field(None, description='ID of this user role permission.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionGroup".',
    )
    name: Optional[str] = Field(
        None, description='Name of this user role permission group.'
    )


class UserRolePermissionGroupsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionGroupsListResponse".',
    )
    userRolePermissionGroups: Optional[List[UserRolePermissionGroup]] = Field(
        None, description='User role permission group collection.'
    )


class UserRolePermissionsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionsListResponse".',
    )
    userRolePermissions: Optional[List[UserRolePermission]] = Field(
        None, description='User role permission collection.'
    )


class FileType(Enum):
    FLV = 'FLV'
    THREEGPP = 'THREEGPP'
    MP4 = 'MP4'
    WEBM = 'WEBM'
    M3U8 = 'M3U8'


class VideoFormat(BaseModel):
    fileType: Optional[FileType] = Field(
        None, description='File type of the video format.'
    )
    id: Optional[int] = Field(None, description='ID of the video format.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormat".',
    )
    resolution: Optional[Size] = Field(
        None, description='The resolution of this video format.'
    )
    targetBitRate: Optional[int] = Field(
        None, description='The target bit rate of this video format.'
    )


class VideoFormatsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormatsListResponse".',
    )
    videoFormats: Optional[List[VideoFormat]] = Field(
        None, description='Video format collection.'
    )


class VideoOffset(BaseModel):
    offsetPercentage: Optional[int] = Field(
        None,
        description='Duration, as a percentage of video duration. Do not set when offsetSeconds is set. Acceptable values are 0 to 100, inclusive.',
    )
    offsetSeconds: Optional[int] = Field(
        None,
        description='Duration, in seconds. Do not set when offsetPercentage is set. Acceptable values are 0 to 86399, inclusive.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class SortField(Enum):
    ID = 'ID'
    NAME = 'NAME'


class Ids(RootModel[List[str]]):
    root: List[str]


class TypeEnum(Enum):
    AD_SERVING_STANDARD_AD = 'AD_SERVING_STANDARD_AD'
    AD_SERVING_DEFAULT_AD = 'AD_SERVING_DEFAULT_AD'
    AD_SERVING_CLICK_TRACKER = 'AD_SERVING_CLICK_TRACKER'
    AD_SERVING_TRACKING = 'AD_SERVING_TRACKING'
    AD_SERVING_BRAND_SAFE_AD = 'AD_SERVING_BRAND_SAFE_AD'


class AudienceSegmentIds(RootModel[List[str]]):
    root: List[str]


class CampaignIds(RootModel[List[str]]):
    root: List[str]


class CreativeIds(RootModel[List[str]]):
    root: List[str]


class CreativeOptimizationConfigurationIds(RootModel[List[str]]):
    root: List[str]


class LandingPageIds(RootModel[List[str]]):
    root: List[str]


class PlacementIds(RootModel[List[str]]):
    root: List[str]


class RemarketingListIds(RootModel[List[str]]):
    root: List[str]


class SizeIds(RootModel[List[str]]):
    root: List[str]


class Type11(RootModel[List[TypeEnum]]):
    root: List[TypeEnum]


class AdvertiserIds(RootModel[List[str]]):
    root: List[str]


class Status6(Enum):
    APPROVED = 'APPROVED'
    ON_HOLD = 'ON_HOLD'


class AdvertiserGroupIds(RootModel[List[str]]):
    root: List[str]


class FloodlightConfigurationIds(RootModel[List[str]]):
    root: List[str]


class ExcludedIds(RootModel[List[str]]):
    root: List[str]


class Action(Enum):
    ACTION_CREATE = 'ACTION_CREATE'
    ACTION_UPDATE = 'ACTION_UPDATE'
    ACTION_DELETE = 'ACTION_DELETE'
    ACTION_ENABLE = 'ACTION_ENABLE'
    ACTION_DISABLE = 'ACTION_DISABLE'
    ACTION_ADD = 'ACTION_ADD'
    ACTION_REMOVE = 'ACTION_REMOVE'
    ACTION_MARK_AS_DEFAULT = 'ACTION_MARK_AS_DEFAULT'
    ACTION_ASSOCIATE = 'ACTION_ASSOCIATE'
    ACTION_ASSIGN = 'ACTION_ASSIGN'
    ACTION_UNASSIGN = 'ACTION_UNASSIGN'
    ACTION_SEND = 'ACTION_SEND'
    ACTION_LINK = 'ACTION_LINK'
    ACTION_UNLINK = 'ACTION_UNLINK'
    ACTION_PUSH = 'ACTION_PUSH'
    ACTION_EMAIL_TAGS = 'ACTION_EMAIL_TAGS'
    ACTION_SHARE = 'ACTION_SHARE'


class ObjectType1(Enum):
    OBJECT_ADVERTISER = 'OBJECT_ADVERTISER'
    OBJECT_FLOODLIGHT_CONFIGURATION = 'OBJECT_FLOODLIGHT_CONFIGURATION'
    OBJECT_AD = 'OBJECT_AD'
    OBJECT_FLOODLIGHT_ACTVITY = 'OBJECT_FLOODLIGHT_ACTVITY'
    OBJECT_CAMPAIGN = 'OBJECT_CAMPAIGN'
    OBJECT_FLOODLIGHT_ACTIVITY_GROUP = 'OBJECT_FLOODLIGHT_ACTIVITY_GROUP'
    OBJECT_CREATIVE = 'OBJECT_CREATIVE'
    OBJECT_PLACEMENT = 'OBJECT_PLACEMENT'
    OBJECT_DFA_SITE = 'OBJECT_DFA_SITE'
    OBJECT_USER_ROLE = 'OBJECT_USER_ROLE'
    OBJECT_USER_PROFILE = 'OBJECT_USER_PROFILE'
    OBJECT_ADVERTISER_GROUP = 'OBJECT_ADVERTISER_GROUP'
    OBJECT_ACCOUNT = 'OBJECT_ACCOUNT'
    OBJECT_SUBACCOUNT = 'OBJECT_SUBACCOUNT'
    OBJECT_RICHMEDIA_CREATIVE = 'OBJECT_RICHMEDIA_CREATIVE'
    OBJECT_INSTREAM_CREATIVE = 'OBJECT_INSTREAM_CREATIVE'
    OBJECT_MEDIA_ORDER = 'OBJECT_MEDIA_ORDER'
    OBJECT_CONTENT_CATEGORY = 'OBJECT_CONTENT_CATEGORY'
    OBJECT_PLACEMENT_STRATEGY = 'OBJECT_PLACEMENT_STRATEGY'
    OBJECT_SD_SITE = 'OBJECT_SD_SITE'
    OBJECT_SIZE = 'OBJECT_SIZE'
    OBJECT_CREATIVE_GROUP = 'OBJECT_CREATIVE_GROUP'
    OBJECT_CREATIVE_ASSET = 'OBJECT_CREATIVE_ASSET'
    OBJECT_USER_PROFILE_FILTER = 'OBJECT_USER_PROFILE_FILTER'
    OBJECT_LANDING_PAGE = 'OBJECT_LANDING_PAGE'
    OBJECT_CREATIVE_FIELD = 'OBJECT_CREATIVE_FIELD'
    OBJECT_REMARKETING_LIST = 'OBJECT_REMARKETING_LIST'
    OBJECT_PROVIDED_LIST_CLIENT = 'OBJECT_PROVIDED_LIST_CLIENT'
    OBJECT_EVENT_TAG = 'OBJECT_EVENT_TAG'
    OBJECT_CREATIVE_BUNDLE = 'OBJECT_CREATIVE_BUNDLE'
    OBJECT_BILLING_ACCOUNT_GROUP = 'OBJECT_BILLING_ACCOUNT_GROUP'
    OBJECT_BILLING_FEATURE = 'OBJECT_BILLING_FEATURE'
    OBJECT_RATE_CARD = 'OBJECT_RATE_CARD'
    OBJECT_ACCOUNT_BILLING_FEATURE = 'OBJECT_ACCOUNT_BILLING_FEATURE'
    OBJECT_BILLING_MINIMUM_FEE = 'OBJECT_BILLING_MINIMUM_FEE'
    OBJECT_BILLING_PROFILE = 'OBJECT_BILLING_PROFILE'
    OBJECT_PLAYSTORE_LINK = 'OBJECT_PLAYSTORE_LINK'
    OBJECT_TARGETING_TEMPLATE = 'OBJECT_TARGETING_TEMPLATE'
    OBJECT_SEARCH_LIFT_STUDY = 'OBJECT_SEARCH_LIFT_STUDY'
    OBJECT_FLOODLIGHT_DV360_LINK = 'OBJECT_FLOODLIGHT_DV360_LINK'
    OBJECT_ADVERTISER_CUSTOMER_LINK = 'OBJECT_ADVERTISER_CUSTOMER_LINK'


class ObjectIds(RootModel[List[str]]):
    root: List[str]


class UserProfileIds(RootModel[List[str]]):
    root: List[str]


class CountryDartIds(RootModel[List[str]]):
    root: List[str]


class DartIds(RootModel[List[str]]):
    root: List[str]


class RegionDartIds(RootModel[List[str]]):
    root: List[str]


class SortField18(Enum):
    ID = 'ID'
    VALUE = 'VALUE'


class SortField20(Enum):
    ID = 'ID'
    NAME = 'NAME'


class Type12(Enum):
    IMAGE = 'IMAGE'
    DISPLAY_REDIRECT = 'DISPLAY_REDIRECT'
    CUSTOM_DISPLAY = 'CUSTOM_DISPLAY'
    INTERNAL_REDIRECT = 'INTERNAL_REDIRECT'
    CUSTOM_DISPLAY_INTERSTITIAL = 'CUSTOM_DISPLAY_INTERSTITIAL'
    INTERSTITIAL_INTERNAL_REDIRECT = 'INTERSTITIAL_INTERNAL_REDIRECT'
    TRACKING_TEXT = 'TRACKING_TEXT'
    RICH_MEDIA_DISPLAY_BANNER = 'RICH_MEDIA_DISPLAY_BANNER'
    RICH_MEDIA_INPAGE_FLOATING = 'RICH_MEDIA_INPAGE_FLOATING'
    RICH_MEDIA_IM_EXPAND = 'RICH_MEDIA_IM_EXPAND'
    RICH_MEDIA_DISPLAY_EXPANDING = 'RICH_MEDIA_DISPLAY_EXPANDING'
    RICH_MEDIA_DISPLAY_INTERSTITIAL = 'RICH_MEDIA_DISPLAY_INTERSTITIAL'
    RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL = (
        'RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL'
    )
    RICH_MEDIA_MOBILE_IN_APP = 'RICH_MEDIA_MOBILE_IN_APP'
    FLASH_INPAGE = 'FLASH_INPAGE'
    INSTREAM_VIDEO = 'INSTREAM_VIDEO'
    VPAID_LINEAR_VIDEO = 'VPAID_LINEAR_VIDEO'
    VPAID_NON_LINEAR_VIDEO = 'VPAID_NON_LINEAR_VIDEO'
    INSTREAM_VIDEO_REDIRECT = 'INSTREAM_VIDEO_REDIRECT'
    RICH_MEDIA_PEEL_DOWN = 'RICH_MEDIA_PEEL_DOWN'
    HTML5_BANNER = 'HTML5_BANNER'
    DISPLAY = 'DISPLAY'
    DISPLAY_IMAGE_GALLERY = 'DISPLAY_IMAGE_GALLERY'
    BRAND_SAFE_DEFAULT_INSTREAM_VIDEO = 'BRAND_SAFE_DEFAULT_INSTREAM_VIDEO'
    INSTREAM_AUDIO = 'INSTREAM_AUDIO'


class CompanionCreativeIds(RootModel[List[str]]):
    root: List[str]


class CreativeFieldIds(RootModel[List[str]]):
    root: List[str]


class RenderingIds(RootModel[List[str]]):
    root: List[str]


class Types(RootModel[List[Type12]]):
    root: List[Type12]


class ObjectType3(Enum):
    OBJECT_ADVERTISER = 'OBJECT_ADVERTISER'
    OBJECT_AD = 'OBJECT_AD'
    OBJECT_CREATIVE = 'OBJECT_CREATIVE'
    OBJECT_PLACEMENT = 'OBJECT_PLACEMENT'


class Names(RootModel[List[str]]):
    root: List[str]


class EventTagType(Enum):
    IMPRESSION_IMAGE_EVENT_TAG = 'IMPRESSION_IMAGE_EVENT_TAG'
    IMPRESSION_JAVASCRIPT_EVENT_TAG = 'IMPRESSION_JAVASCRIPT_EVENT_TAG'
    CLICK_THROUGH_EVENT_TAG = 'CLICK_THROUGH_EVENT_TAG'


class EventTagTypes(RootModel[List[EventTagType]]):
    root: List[EventTagType]


class Scope(Enum):
    ALL = 'ALL'
    MINE = 'MINE'
    SHARED_WITH_ME = 'SHARED_WITH_ME'


class SortField28(Enum):
    ID = 'ID'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'


class SortField30(Enum):
    ID = 'ID'
    NAME = 'NAME'


class FloodlightActivityGroupIds(RootModel[List[str]]):
    root: List[str]


class Type14(Enum):
    COUNTER = 'COUNTER'
    SALE = 'SALE'


class Directories(RootModel[List[Directory]]):
    root: List[Directory]


class ContentCategoryIds(RootModel[List[str]]):
    root: List[str]


class DirectorySiteIds(RootModel[List[str]]):
    root: List[str]


class PlacementStrategyIds(RootModel[List[str]]):
    root: List[str]


class PricingTypes(RootModel[List[PricingType1]]):
    root: List[PricingType1]


class SiteIds(RootModel[List[str]]):
    root: List[str]


class Compatibilities(RootModel[List[Compatibility]]):
    root: List[Compatibility]


class GroupIds(RootModel[List[str]]):
    root: List[str]


class PricingTypes1(RootModel[List[PricingType1]]):
    root: List[PricingType1]


class TagFormats(RootModel[List[TagFormat1]]):
    root: List[TagFormat1]


class Type16(Enum):
    PLANNING_PLACEMENT_TYPE_REGULAR = 'PLANNING_PLACEMENT_TYPE_REGULAR'
    PLANNING_PLACEMENT_TYPE_CREDIT = 'PLANNING_PLACEMENT_TYPE_CREDIT'


class OrderId(RootModel[List[str]]):
    root: List[str]


class SiteId(RootModel[List[str]]):
    root: List[str]


class Scope2(Enum):
    ALL = 'ALL'
    MINE = 'MINE'


class SortField50(Enum):
    ID = 'ID'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'
    NAME = 'NAME'


class SortField52(Enum):
    ID = 'ID'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'


class SortField54(Enum):
    ID = 'ID'
    NAME = 'NAME'


class Account(BaseModel):
    accountPermissionIds: Optional[List[str]] = Field(
        None, description='Account permissions assigned to this account.'
    )
    accountProfile: Optional[AccountProfile] = Field(
        None,
        description='Profile for this account. This is a read-only field that can be left blank.',
    )
    active: Optional[bool] = Field(None, description='Whether this account is active.')
    activeAdsLimitTier: Optional[ActiveAdsLimitTier] = Field(
        None, description='Maximum number of active ads allowed for this account.'
    )
    activeViewOptOut: Optional[bool] = Field(
        None,
        description='Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.',
    )
    availablePermissionIds: Optional[List[str]] = Field(
        None,
        description='User role permissions available to the user roles of this account.',
    )
    countryId: Optional[str] = Field(
        None, description='ID of the country associated with this account.'
    )
    currencyId: Optional[str] = Field(
        None,
        description='ID of currency associated with this account. This is a required field. Acceptable values are: - "1" for USD - "2" for GBP - "3" for ESP - "4" for SEK - "5" for CAD - "6" for JPY - "7" for DEM - "8" for AUD - "9" for FRF - "10" for ITL - "11" for DKK - "12" for NOK - "13" for FIM - "14" for ZAR - "15" for IEP - "16" for NLG - "17" for EUR - "18" for KRW - "19" for TWD - "20" for SGD - "21" for CNY - "22" for HKD - "23" for NZD - "24" for MYR - "25" for BRL - "26" for PTE - "28" for CLP - "29" for TRY - "30" for ARS - "31" for PEN - "32" for ILS - "33" for CHF - "34" for VEF - "35" for COP - "36" for GTQ - "37" for PLN - "39" for INR - "40" for THB - "41" for IDR - "42" for CZK - "43" for RON - "44" for HUF - "45" for RUB - "46" for AED - "47" for BGN - "48" for HRK - "49" for MXN - "50" for NGN - "51" for EGP ',
    )
    defaultCreativeSizeId: Optional[str] = Field(
        None, description='Default placement dimensions for this account.'
    )
    description: Optional[str] = Field(None, description='Description of this account.')
    id: Optional[str] = Field(
        None,
        description='ID of this account. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#account".',
    )
    locale: Optional[str] = Field(
        None,
        description='Locale of this account. Acceptable values are: - "cs" (Czech) - "de" (German) - "en" (English) - "en-GB" (English United Kingdom) - "es" (Spanish) - "fr" (French) - "it" (Italian) - "ja" (Japanese) - "ko" (Korean) - "pl" (Polish) - "pt-BR" (Portuguese Brazil) - "ru" (Russian) - "sv" (Swedish) - "tr" (Turkish) - "zh-CN" (Chinese Simplified) - "zh-TW" (Chinese Traditional) ',
    )
    maximumImageSize: Optional[str] = Field(
        None,
        description='Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.',
    )
    nielsenOcrEnabled: Optional[bool] = Field(
        None,
        description='Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.',
    )
    reportsConfiguration: Optional[ReportsConfiguration] = Field(
        None, description='Reporting configuration of this account.'
    )
    shareReportsWithTwitter: Optional[bool] = Field(
        None, description='Share Path to Conversion reports with Twitter.'
    )
    teaserSizeLimit: Optional[str] = Field(
        None,
        description='File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.',
    )


class AccountUserProfile(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of the user profile. This is a read-only field that can be left blank.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.',
    )
    advertiserFilter: Optional[ObjectFilter] = Field(
        None,
        description='Filter that describes which advertisers are visible to the user profile.',
    )
    campaignFilter: Optional[ObjectFilter] = Field(
        None,
        description='Filter that describes which campaigns are visible to the user profile.',
    )
    comments: Optional[str] = Field(None, description='Comments for this user profile.')
    email: Optional[str] = Field(
        None,
        description='Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of the user profile. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountUserProfile".',
    )
    locale: Optional[str] = Field(
        None,
        description='Locale of the user profile. This is a required field. Acceptable values are: - "cs" (Czech) - "de" (German) - "en" (English) - "en-GB" (English United Kingdom) - "es" (Spanish) - "fr" (French) - "it" (Italian) - "ja" (Japanese) - "ko" (Korean) - "pl" (Polish) - "pt-BR" (Portuguese Brazil) - "ru" (Russian) - "sv" (Swedish) - "tr" (Turkish) - "zh-CN" (Chinese Simplified) - "zh-TW" (Chinese Traditional) ',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: "&;<>"#%,".',
    )
    siteFilter: Optional[ObjectFilter] = Field(
        None,
        description='Filter that describes which sites are visible to the user profile.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of the user profile. This is a read-only field that can be left blank.',
    )
    traffickerType: Optional[TraffickerType] = Field(
        None,
        description='Trafficker type of this user profile. This is a read-only field.',
    )
    userAccessType: Optional[UserAccessType] = Field(
        None,
        description='User type of the user profile. This is a read-only field that can be left blank.',
    )
    userRoleFilter: Optional[ObjectFilter] = Field(
        None,
        description='Filter that describes which user roles are visible to the user profile.',
    )
    userRoleId: Optional[str] = Field(
        None, description='User role ID of the user profile. This is a required field.'
    )


class AccountUserProfilesListResponse(BaseModel):
    accountUserProfiles: Optional[List[AccountUserProfile]] = Field(
        None, description='Account user profile collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountUserProfilesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class AccountsListResponse(BaseModel):
    accounts: Optional[List[Account]] = Field(None, description='Account collection.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class Activities(BaseModel):
    filters: Optional[List[DimensionValue]] = Field(
        None,
        description='List of activity filters. The dimension values need to be all either of type "dfa:activity" or "dfa:activityGroup".',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#activities.',
    )
    metricNames: Optional[List[str]] = Field(
        None, description='List of names of floodlight activity metrics.'
    )


class Advertiser(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this advertiser.This is a read-only field that can be left blank.',
    )
    advertiserGroupId: Optional[str] = Field(
        None,
        description='ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.',
    )
    clickThroughUrlSuffix: Optional[str] = Field(
        None,
        description='Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.',
    )
    defaultClickThroughEventTagId: Optional[str] = Field(
        None,
        description="ID of the click-through event tag to apply by default to the landing pages of this advertiser's campaigns.",
    )
    defaultEmail: Optional[str] = Field(
        None, description='Default email address used in sender field for tag emails.'
    )
    floodlightConfigurationId: Optional[str] = Field(
        None,
        description="Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser's floodlight configuration ID in order to share that advertiser's floodlight configuration with this advertiser, so long as: - This advertiser's original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. - This advertiser's original floodlight configuration is not already shared with another advertiser. ",
    )
    floodlightConfigurationIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this advertiser. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this advertiser. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiser".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.',
    )
    originalFloodlightConfigurationId: Optional[str] = Field(
        None,
        description="Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser's current floodlight configuration. You cannot unshare an advertiser's floodlight configuration if the shared configuration has activities associated with any campaign or placement.",
    )
    status: Optional[Status] = Field(None, description='Status of this advertiser.')
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this advertiser.This is a read-only field that can be left blank.',
    )
    suspended: Optional[bool] = Field(
        None, description='Suspension status of this advertiser.'
    )


class AdvertisersListResponse(BaseModel):
    advertisers: Optional[List[Advertiser]] = Field(
        None, description='Advertiser collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertisersListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class CitiesListResponse(BaseModel):
    cities: Optional[List[City]] = Field(None, description='City collection.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#citiesListResponse".',
    )


class ClickTag(BaseModel):
    clickThroughUrl: Optional[CreativeClickThroughUrl] = Field(
        None,
        description='Parameter value for the specified click tag. This field contains a click-through url.',
    )
    eventName: Optional[str] = Field(
        None,
        description='Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    name: Optional[str] = Field(
        None,
        description="Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset's creativeAssetId.name field.",
    )


class CompanionSetting(BaseModel):
    companionsDisabled: Optional[bool] = Field(
        None, description='Whether companions are disabled for this placement.'
    )
    enabledSizes: Optional[List[Size]] = Field(
        None,
        description='Allowlist of companion sizes to be served to this placement. Set this list to null or empty to serve all companion sizes.',
    )
    imageOnly: Optional[bool] = Field(
        None, description='Whether to serve only static images as companions.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#companionSetting".',
    )


class ContentCategoriesListResponse(BaseModel):
    contentCategories: Optional[List[ContentCategory]] = Field(
        None, description='Content category collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#contentCategoriesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class Conversion(BaseModel):
    childDirectedTreatment: Optional[bool] = Field(
        None,
        description='Whether this particular request may come from a user under the age of 13, under COPPA compliance.',
    )
    customVariables: Optional[List[CustomFloodlightVariable]] = Field(
        None,
        description='Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.',
    )
    dclid: Optional[str] = Field(
        None,
        description='The display click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid is a required field.',
    )
    encryptedUserId: Optional[str] = Field(
        None,
        description='The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId, gclid and dclid. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid or dclid is a required field.',
    )
    encryptedUserIdCandidates: Optional[List[str]] = Field(
        None,
        description='A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId, gclid and dclid. This or encryptedUserId or matchId or mobileDeviceId or gclid or dclid is a required field.',
    )
    floodlightActivityId: Optional[str] = Field(
        None,
        description='Floodlight Activity ID of this conversion. This is a required field.',
    )
    floodlightConfigurationId: Optional[str] = Field(
        None,
        description='Floodlight Configuration ID of this conversion. This is a required field.',
    )
    gclid: Optional[str] = Field(
        None,
        description='The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId and dclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId or dclid is a required field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversion".',
    )
    limitAdTracking: Optional[bool] = Field(
        None,
        description='Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.',
    )
    matchId: Optional[str] = Field(
        None,
        description='The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId, gclid and dclid. This or encryptedUserId or encryptedUserIdCandidates[] or mobileDeviceId or gclid or dclid is a required field.',
    )
    mobileDeviceId: Optional[str] = Field(
        None,
        description='The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, gclid and dclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid or dclid is a required field.',
    )
    nonPersonalizedAd: Optional[bool] = Field(
        None, description='Whether the conversion was for a non personalized ad.'
    )
    ordinal: Optional[str] = Field(
        None,
        description='The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.',
    )
    quantity: Optional[str] = Field(None, description='The quantity of the conversion.')
    timestampMicros: Optional[str] = Field(
        None,
        description='The timestamp of conversion, in Unix epoch micros. This is a required field.',
    )
    treatmentForUnderage: Optional[bool] = Field(
        None,
        description="Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).",
    )
    value: Optional[float] = Field(None, description='The value of the conversion.')


class ConversionStatus(BaseModel):
    conversion: Optional[Conversion] = Field(
        None, description='The original conversion that was inserted or updated.'
    )
    errors: Optional[List[ConversionError]] = Field(
        None, description='A list of errors related to this conversion.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionStatus".',
    )


class ConversionsBatchInsertRequest(BaseModel):
    conversions: Optional[List[Conversion]] = Field(
        None, description='The set of conversions to insert.'
    )
    encryptionInfo: Optional[EncryptionInfo] = Field(
        None,
        description='Describes how encryptedUserId or encryptedUserIdCandidates[] is encrypted. This is a required field if encryptedUserId or encryptedUserIdCandidates[] is used.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchInsertRequest".',
    )


class ConversionsBatchInsertResponse(BaseModel):
    hasFailures: Optional[bool] = Field(
        None, description='Indicates that some or all conversions failed to insert.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchInsertResponse".',
    )
    status: Optional[List[ConversionStatus]] = Field(
        None,
        description='The insert status of each conversion. Statuses are returned in the same order that conversions are inserted.',
    )


class ConversionsBatchUpdateRequest(BaseModel):
    conversions: Optional[List[Conversion]] = Field(
        None, description='The set of conversions to update.'
    )
    encryptionInfo: Optional[EncryptionInfo] = Field(
        None,
        description='Describes how encryptedUserId is encrypted. This is a required field if encryptedUserId is used.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchUpdateRequest".',
    )


class ConversionsBatchUpdateResponse(BaseModel):
    hasFailures: Optional[bool] = Field(
        None, description='Indicates that some or all conversions failed to update.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchUpdateResponse".',
    )
    status: Optional[List[ConversionStatus]] = Field(
        None,
        description='The update status of each conversion. Statuses are returned in the same order that conversions are updated.',
    )


class CountriesListResponse(BaseModel):
    countries: Optional[List[Country]] = Field(None, description='Country collection.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#countriesListResponse".',
    )


class CreativeAssetSelection(BaseModel):
    defaultAssetId: Optional[str] = Field(
        None,
        description='A creativeAssets[].id. This should refer to one of the parent assets in this creative, and will be served if none of the rules match. This is a required field.',
    )
    rules: Optional[List[Rule]] = Field(
        None,
        description='Rules determine which asset will be served to a viewer. Rules will be evaluated in the order in which they are stored in this list. This list must contain at least one rule. Applicable to INSTREAM_VIDEO creatives.',
    )


class CreativeAssignment(BaseModel):
    active: Optional[bool] = Field(
        None,
        description="Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.",
    )
    applyEventTags: Optional[bool] = Field(
        None,
        description='Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.',
    )
    clickThroughUrl: Optional[ClickThroughUrl] = Field(
        None, description='Click-through URL of the creative assignment.'
    )
    companionCreativeOverrides: Optional[List[CompanionClickThroughOverride]] = Field(
        None,
        description='Companion creative overrides for this creative assignment. Applicable to video ads.',
    )
    creativeGroupAssignments: Optional[List[CreativeGroupAssignment]] = Field(
        None,
        description='Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.',
    )
    creativeId: Optional[str] = Field(
        None, description='ID of the creative to be assigned. This is a required field.'
    )
    creativeIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the creative. This is a read-only, auto-generated field.',
    )
    endTime: Optional[datetime] = None
    richMediaExitOverrides: Optional[List[RichMediaExitOverride]] = Field(
        None,
        description='Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR ',
    )
    sequence: Optional[int] = Field(
        None,
        description='Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.',
    )
    sslCompliant: Optional[bool] = Field(
        None,
        description='Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.',
    )
    startTime: Optional[datetime] = None
    weight: Optional[int] = Field(
        None,
        description='Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.',
    )


class CreativeField(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this creative field. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this creative field. This is a required field on insertion.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this creative field. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeField".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this creative field. This is a required field and must be less than 256 characters long and unique among creative fields of the same advertiser.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this creative field. This is a read-only field that can be left blank.',
    )


class CreativeFieldsListResponse(BaseModel):
    creativeFields: Optional[List[CreativeField]] = Field(
        None, description='Creative field collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class CreativeGroup(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this creative group. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this creative group. This is a required field on insertion.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    groupNumber: Optional[int] = Field(
        None,
        description='Subgroup of the creative group. Assign your creative groups to a subgroup in order to filter or manage them more easily. This field is required on insertion and is read-only after insertion. Acceptable values are 1 to 2, inclusive.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this creative group. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeGroup".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this creative group. This is a required field and must be less than 256 characters long and unique among creative groups of the same advertiser.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this creative group. This is a read-only field that can be left blank.',
    )


class CreativeGroupsListResponse(BaseModel):
    creativeGroups: Optional[List[CreativeGroup]] = Field(
        None, description='Creative group collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeGroupsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class CreativeOptimizationConfiguration(BaseModel):
    id: Optional[str] = Field(
        None,
        description='ID of this creative optimization config. This field is auto-generated when the campaign is inserted or updated. It can be null for existing campaigns.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this creative optimization config. This is a required field and must be less than 129 characters long.',
    )
    optimizationActivitys: Optional[List[OptimizationActivity]] = Field(
        None,
        description='List of optimization activities associated with this configuration.',
    )
    optimizationModel: Optional[OptimizationModel] = Field(
        None, description='Optimization model for this configuration.'
    )


class CreativeRotation(BaseModel):
    creativeAssignments: Optional[List[CreativeAssignment]] = Field(
        None, description='Creative assignments in this creative rotation.'
    )
    creativeOptimizationConfigurationId: Optional[str] = Field(
        None,
        description="Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.",
    )
    type: Optional[Type3] = Field(
        None,
        description='Type of creative rotation. Can be used to specify whether to use sequential or random rotation.',
    )
    weightCalculationStrategy: Optional[WeightCalculationStrategy] = Field(
        None,
        description='Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.',
    )


class CrossDimensionReachReportCompatibleFields(BaseModel):
    breakdown: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "breakdown" section of the report.',
    )
    dimensionFilters: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#crossDimensionReachReportCompatibleFields.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "metricNames" section of the report.',
    )
    overlapMetrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "overlapMetricNames" section of the report.',
    )


class CustomEventInsert(BaseModel):
    cmDimensions: Optional[CampaignManagerIds] = Field(
        None, description='Campaign Manager dimensions associated with the event.'
    )
    dv3Dimensions: Optional[DV3Ids] = Field(
        None, description='DV360 dimensions associated with the event.'
    )
    insertEventType: Optional[InsertEventType] = Field(
        None, description='The type of event to insert.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventInsert".',
    )
    matchId: Optional[str] = Field(
        None,
        description='The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required.',
    )
    mobileDeviceId: Optional[str] = Field(
        None,
        description='The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required.',
    )


class CustomRichMediaEvents(BaseModel):
    filteredEventIds: Optional[List[DimensionValue]] = Field(
        None,
        description='List of custom rich media event IDs. Dimension values must be all of type dfa:richMediaEventTypeIdAndName.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#customRichMediaEvents.',
    )


class CustomViewabilityMetric(BaseModel):
    configuration: Optional[CustomViewabilityMetricConfiguration] = Field(
        None, description='Configuration of the custom viewability metric.'
    )
    id: Optional[str] = Field(None, description='ID of the custom viewability metric.')
    name: Optional[str] = Field(
        None, description='Name of the custom viewability metric.'
    )


class DeepLink(BaseModel):
    appUrl: Optional[str] = Field(
        None, description='The URL of the mobile app being linked to.'
    )
    fallbackUrl: Optional[str] = Field(
        None,
        description='The fallback URL. This URL will be served to users who do not have the mobile app installed.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#deepLink".',
    )
    mobileApp: Optional[MobileApp] = Field(
        None, description='The mobile app targeted by this deep link.'
    )
    remarketingListIds: Optional[List[str]] = Field(
        None,
        description='Ads served to users on these remarketing lists will use this deep link. Applicable when mobileApp.directory is APPLE_APP_STORE.',
    )


class DeliverySchedule(BaseModel):
    frequencyCap: Optional[FrequencyCap] = Field(
        None,
        description='Limit on the number of times an individual user can be served the ad within a specified period of time.',
    )
    hardCutoff: Optional[bool] = Field(
        None,
        description='Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.',
    )
    impressionRatio: Optional[str] = Field(
        None,
        description='Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.',
    )
    priority: Optional[Priority] = Field(
        None,
        description='Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.',
    )


class DirectorySite(BaseModel):
    id: Optional[str] = Field(
        None,
        description='ID of this directory site. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this directory site. This is a read-only, auto-generated field.',
    )
    inpageTagFormats: Optional[List[InpageTagFormat]] = Field(
        None,
        description='Tag types for regular placements. Acceptable values are: - "STANDARD" - "IFRAME_JAVASCRIPT_INPAGE" - "INTERNAL_REDIRECT_INPAGE" - "JAVASCRIPT_INPAGE" ',
    )
    interstitialTagFormats: Optional[List[InterstitialTagFormat]] = Field(
        None,
        description='Tag types for interstitial placements. Acceptable values are: - "IFRAME_JAVASCRIPT_INTERSTITIAL" - "INTERNAL_REDIRECT_INTERSTITIAL" - "JAVASCRIPT_INTERSTITIAL" ',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySite".',
    )
    name: Optional[str] = Field(None, description='Name of this directory site.')
    settings: Optional[DirectorySiteSettings] = Field(
        None, description='Directory site settings.'
    )
    url: Optional[str] = Field(None, description='URL of this directory site.')


class DirectorySitesListResponse(BaseModel):
    directorySites: Optional[List[DirectorySite]] = Field(
        None, description='Directory site collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySitesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class EventFilter(BaseModel):
    dimensionFilter: Optional[PathReportDimensionValue] = Field(
        None, description='The dimension filter contained within this EventFilter.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#eventFilter.',
    )


class FloodlightActivity(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this floodlight activity. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description="Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.",
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    attributionEnabled: Optional[bool] = Field(
        None, description='Whether the activity is enabled for attribution.'
    )
    cacheBustingType: Optional[CacheBustingType] = Field(
        None,
        description='Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.',
    )
    countingMethod: Optional[CountingMethod] = Field(
        None,
        description='Counting method for conversions for this floodlight activity. This is a required field.',
    )
    defaultTags: Optional[List[FloodlightActivityDynamicTag]] = Field(
        None, description='Dynamic floodlight tags.'
    )
    expectedUrl: Optional[str] = Field(
        None,
        description='URL where this tag will be deployed. If specified, must be less than 256 characters long.',
    )
    floodlightActivityGroupId: Optional[str] = Field(
        None,
        description='Floodlight activity group ID of this floodlight activity. This is a required field.',
    )
    floodlightActivityGroupName: Optional[str] = Field(
        None,
        description='Name of the associated floodlight activity group. This is a read-only field.',
    )
    floodlightActivityGroupTagString: Optional[str] = Field(
        None,
        description='Tag string of the associated floodlight activity group. This is a read-only field.',
    )
    floodlightActivityGroupType: Optional[FloodlightActivityGroupType] = Field(
        None,
        description='Type of the associated floodlight activity group. This is a read-only field.',
    )
    floodlightConfigurationId: Optional[str] = Field(
        None,
        description="Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.",
    )
    floodlightConfigurationIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.',
    )
    floodlightTagType: Optional[FloodlightTagType] = Field(
        None,
        description='The type of Floodlight tag this activity will generate. This is a required field.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this floodlight activity. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this floodlight activity. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivity".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.',
    )
    notes: Optional[str] = Field(
        None, description='General notes or implementation instructions for the tag.'
    )
    publisherTags: Optional[List[FloodlightActivityPublisherDynamicTag]] = Field(
        None, description='Publisher dynamic floodlight tags.'
    )
    secure: Optional[bool] = Field(None, description='Whether this tag should use SSL.')
    sslCompliant: Optional[bool] = Field(
        None,
        description='Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.',
    )
    sslRequired: Optional[bool] = Field(
        None, description='Whether this floodlight activity must be SSL-compliant.'
    )
    status: Optional[Status3] = Field(
        None,
        description='The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.',
    )
    tagFormat: Optional[TagFormat] = Field(
        None,
        description='Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.',
    )
    tagString: Optional[str] = Field(
        None,
        description='Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.',
    )
    userDefinedVariableTypes: Optional[List[UserDefinedVariableType]] = Field(
        None,
        description='List of the user-defined variables used by this conversion tag. These map to the "u[1-100]=" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. ',
    )


class FloodlightConfiguration(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this floodlight configuration. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of the parent advertiser of this floodlight configuration.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    analyticsDataSharingEnabled: Optional[bool] = Field(
        None, description='Whether advertiser data is shared with Google Analytics.'
    )
    customViewabilityMetric: Optional[CustomViewabilityMetric] = Field(
        None, description='Custom Viewability metric for the floodlight configuration.'
    )
    exposureToConversionEnabled: Optional[bool] = Field(
        None,
        description='Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.',
    )
    firstDayOfWeek: Optional[FirstDayOfWeek] = Field(
        None,
        description='Day that will be counted as the first day of the week in reports. This is a required field.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this floodlight configuration. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this floodlight configuration. This is a read-only, auto-generated field.',
    )
    inAppAttributionTrackingEnabled: Optional[bool] = Field(
        None, description='Whether in-app attribution tracking is enabled.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightConfiguration".',
    )
    lookbackConfiguration: Optional[LookbackConfiguration] = Field(
        None, description='Lookback window settings for this floodlight configuration.'
    )
    naturalSearchConversionAttributionOption: Optional[
        NaturalSearchConversionAttributionOption
    ] = Field(
        None, description='Types of attribution options for natural search conversions.'
    )
    omnitureSettings: Optional[OmnitureSettings] = Field(
        None, description='Settings for Campaign Manager Omniture integration.'
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.',
    )
    tagSettings: Optional[TagSettings] = Field(
        None,
        description='Configuration settings for dynamic and image floodlight tags.',
    )
    thirdPartyAuthenticationTokens: Optional[List[ThirdPartyAuthenticationToken]] = (
        Field(
            None,
            description='List of third-party authentication tokens enabled for this configuration.',
        )
    )
    userDefinedVariableConfigurations: Optional[
        List[UserDefinedVariableConfiguration]
    ] = Field(
        None,
        description='List of user defined variables enabled for this configuration.',
    )


class FloodlightConfigurationsListResponse(BaseModel):
    floodlightConfigurations: Optional[List[FloodlightConfiguration]] = Field(
        None, description='Floodlight configuration collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightConfigurationsListResponse".',
    )


class FloodlightReportCompatibleFields(BaseModel):
    dimensionFilters: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.',
    )
    dimensions: Optional[List[Dimension]] = Field(
        None,
        description='Dimensions which are compatible to be selected in the "dimensions" section of the report.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='Metrics which are compatible to be selected in the "metricNames" section of the report.',
    )


class GeoTargeting(BaseModel):
    cities: Optional[List[City]] = Field(
        None,
        description='Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.',
    )
    countries: Optional[List[Country]] = Field(
        None,
        description='Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.',
    )
    excludeCountries: Optional[bool] = Field(
        None,
        description='Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.',
    )
    metros: Optional[List[Metro]] = Field(
        None,
        description='Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.',
    )
    postalCodes: Optional[List[PostalCode]] = Field(
        None,
        description='Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.',
    )
    regions: Optional[List[Region]] = Field(
        None,
        description='Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.',
    )


class InventoryItem(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Account ID of this inventory item.'
    )
    adSlots: Optional[List[AdSlot]] = Field(
        None,
        description='Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.',
    )
    advertiserId: Optional[str] = Field(
        None, description='Advertiser ID of this inventory item.'
    )
    contentCategoryId: Optional[str] = Field(
        None, description='Content category ID of this inventory item.'
    )
    estimatedClickThroughRate: Optional[str] = Field(
        None, description='Estimated click-through rate of this inventory item.'
    )
    estimatedConversionRate: Optional[str] = Field(
        None, description='Estimated conversion rate of this inventory item.'
    )
    id: Optional[str] = Field(None, description='ID of this inventory item.')
    inPlan: Optional[bool] = Field(
        None, description='Whether this inventory item is in plan.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#inventoryItem".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this inventory item.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.',
    )
    negotiationChannelId: Optional[str] = Field(
        None, description='Negotiation channel ID of this inventory item.'
    )
    orderId: Optional[str] = Field(None, description='Order ID of this inventory item.')
    placementStrategyId: Optional[str] = Field(
        None, description='Placement strategy ID of this inventory item.'
    )
    pricing: Optional[Pricing] = Field(
        None, description='Pricing of this inventory item.'
    )
    projectId: Optional[str] = Field(
        None, description='Project ID of this inventory item.'
    )
    rfpId: Optional[str] = Field(None, description='RFP ID of this inventory item.')
    siteId: Optional[str] = Field(
        None, description='ID of the site this inventory item is associated with.'
    )
    subaccountId: Optional[str] = Field(
        None, description='Subaccount ID of this inventory item.'
    )
    type: Optional[Type7] = Field(None, description='Type of inventory item.')


class InventoryItemsListResponse(BaseModel):
    inventoryItems: Optional[List[InventoryItem]] = Field(
        None, description='Inventory item collection'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#inventoryItemsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class LandingPage(BaseModel):
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this landing page. This is a required field.',
    )
    archived: Optional[bool] = Field(
        None, description='Whether this landing page has been archived.'
    )
    deepLinks: Optional[List[DeepLink]] = Field(
        None,
        description='Links that will direct the user to a mobile app, if installed.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this landing page. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#landingPage".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this landing page. This is a required field. It must be less than 256 characters long.',
    )
    url: Optional[str] = Field(
        None, description='URL of this landing page. This is a required field.'
    )


class ListPopulationClause(BaseModel):
    terms: Optional[List[ListPopulationTerm]] = Field(
        None,
        description='Terms of this list population clause. Each clause is made up of list population terms representing constraints and are joined by ORs.',
    )


class ListPopulationRule(BaseModel):
    floodlightActivityId: Optional[str] = Field(
        None,
        description='Floodlight activity ID associated with this rule. This field can be left blank.',
    )
    floodlightActivityName: Optional[str] = Field(
        None,
        description='Name of floodlight activity associated with this rule. This is a read-only, auto-generated field.',
    )
    listPopulationClauses: Optional[List[ListPopulationClause]] = Field(
        None,
        description='Clauses that make up this list population rule. Clauses are joined by ANDs, and the clauses themselves are made up of list population terms which are joined by ORs.',
    )


class ObaIcon(BaseModel):
    iconClickThroughUrl: Optional[str] = Field(
        None, description='URL to redirect to when an OBA icon is clicked.'
    )
    iconClickTrackingUrl: Optional[str] = Field(
        None, description='URL to track click when an OBA icon is clicked.'
    )
    iconViewTrackingUrl: Optional[str] = Field(
        None, description='URL to track view when an OBA icon is clicked.'
    )
    program: Optional[str] = Field(
        None,
        description='Identifies the industry initiative that the icon supports. For example, AdChoices.',
    )
    resourceUrl: Optional[str] = Field(
        None,
        description='OBA icon resource URL. Campaign Manager only supports image and JavaScript icons. Learn more',
    )
    size: Optional[Size] = Field(None, description='OBA icon size.')
    xPosition: Optional[str] = Field(
        None,
        description='OBA icon x coordinate position. Accepted values are left or right.',
    )
    yPosition: Optional[str] = Field(
        None,
        description='OBA icon y coordinate position. Accepted values are top or bottom.',
    )


class Order(BaseModel):
    accountId: Optional[str] = Field(None, description='Account ID of this order.')
    advertiserId: Optional[str] = Field(
        None, description='Advertiser ID of this order.'
    )
    approverUserProfileIds: Optional[List[str]] = Field(
        None,
        description='IDs for users that have to approve documents created for this order.',
    )
    buyerInvoiceId: Optional[str] = Field(
        None, description='Buyer invoice ID associated with this order.'
    )
    buyerOrganizationName: Optional[str] = Field(
        None, description='Name of the buyer organization.'
    )
    comments: Optional[str] = Field(None, description='Comments in this order.')
    contacts: Optional[List[OrderContact]] = Field(
        None, description='Contacts for this order.'
    )
    id: Optional[str] = Field(
        None, description='ID of this order. This is a read-only, auto-generated field.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#order".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this order.',
    )
    name: Optional[str] = Field(None, description='Name of this order.')
    notes: Optional[str] = Field(None, description='Notes of this order.')
    planningTermId: Optional[str] = Field(
        None, description='ID of the terms and conditions template used in this order.'
    )
    projectId: Optional[str] = Field(None, description='Project ID of this order.')
    sellerOrderId: Optional[str] = Field(
        None, description='Seller order ID associated with this order.'
    )
    sellerOrganizationName: Optional[str] = Field(
        None, description='Name of the seller organization.'
    )
    siteId: Optional[List[str]] = Field(
        None, description='Site IDs this order is associated with.'
    )
    siteNames: Optional[List[str]] = Field(
        None, description='Free-form site names this order is associated with.'
    )
    subaccountId: Optional[str] = Field(
        None, description='Subaccount ID of this order.'
    )
    termsAndConditions: Optional[str] = Field(
        None, description='Terms and conditions of this order.'
    )


class OrdersListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#ordersListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    orders: Optional[List[Order]] = Field(None, description='Order collection.')


class PathFilter(BaseModel):
    eventFilters: Optional[List[EventFilter]] = Field(
        None, description='Event filters in path report.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#pathFilter.',
    )
    pathMatchPosition: Optional[PathMatchPosition] = Field(
        None,
        description="Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.",
    )


class PlacementStrategiesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementStrategiesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    placementStrategies: Optional[List[PlacementStrategy]] = Field(
        None, description='Placement strategy collection.'
    )


class PlacementTag(BaseModel):
    placementId: Optional[str] = Field(None, description='Placement ID')
    tagDatas: Optional[List[TagData]] = Field(
        None, description='Tags generated for this placement.'
    )


class PlacementsGenerateTagsResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementsGenerateTagsResponse".',
    )
    placementTags: Optional[List[PlacementTag]] = Field(
        None, description='Set of generated tags for the specified placements.'
    )


class PopupWindowProperties(BaseModel):
    dimension: Optional[Size] = Field(
        None,
        description='Popup dimension for a creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID',
    )
    offset: Optional[OffsetPosition] = Field(
        None,
        description='Upper-left corner coordinates of the popup window. Applicable if positionType is COORDINATES.',
    )
    positionType: Optional[PositionType] = Field(
        None,
        description='Popup window position either centered or at specific coordinate.',
    )
    showAddressBar: Optional[bool] = Field(
        None, description='Whether to display the browser address bar.'
    )
    showMenuBar: Optional[bool] = Field(
        None, description='Whether to display the browser menu bar.'
    )
    showScrollBar: Optional[bool] = Field(
        None, description='Whether to display the browser scroll bar.'
    )
    showStatusBar: Optional[bool] = Field(
        None, description='Whether to display the browser status bar.'
    )
    showToolBar: Optional[bool] = Field(
        None, description='Whether to display the browser tool bar.'
    )
    title: Optional[str] = Field(None, description='Title of popup window.')


class PricingSchedule(BaseModel):
    capCostOption: Optional[CapCostOption] = Field(
        None, description='Placement cap cost option.'
    )
    endDate: Optional[date] = None
    flighted: Optional[bool] = Field(
        None,
        description='Whether this placement is flighted. If true, pricing periods will be computed automatically.',
    )
    floodlightActivityId: Optional[str] = Field(
        None,
        description='Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.',
    )
    pricingPeriods: Optional[List[PricingSchedulePricingPeriod]] = Field(
        None, description='Pricing periods for this placement.'
    )
    pricingType: Optional[PricingType1] = Field(
        None, description='Placement pricing type. This field is required on insertion.'
    )
    startDate: Optional[date] = None
    testingStartDate: Optional[date] = None


class RemarketingList(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.',
    )
    active: Optional[bool] = Field(
        None, description='Whether this remarketing list is active.'
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Dimension value for the advertiser ID that owns this remarketing list. This is a required field.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    description: Optional[str] = Field(
        None, description='Remarketing list description.'
    )
    id: Optional[str] = Field(
        None,
        description='Remarketing list ID. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingList".',
    )
    lifeSpan: Optional[str] = Field(
        None,
        description='Number of days that a user should remain in the remarketing list without an impression. Acceptable values are 1 to 540, inclusive.',
    )
    listPopulationRule: Optional[ListPopulationRule] = Field(
        None, description='Rule used to populate the remarketing list with users.'
    )
    listSize: Optional[str] = Field(
        None,
        description='Number of users currently in the list. This is a read-only field.',
    )
    listSource: Optional[ListSource] = Field(
        None, description='Product from which this remarketing list was originated.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the remarketing list. This is a required field. Must be no greater than 128 characters long.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.',
    )


class RemarketingListsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingListsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    remarketingLists: Optional[List[RemarketingList]] = Field(
        None, description='Remarketing list collection.'
    )


class Criteria(BaseModel):
    activities: Optional[Activities] = Field(None, description='Activity group.')
    customRichMediaEvents: Optional[CustomRichMediaEvents] = Field(
        None, description='Custom Rich Media Events group.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range for which this report should be run.'
    )
    dimensionFilters: Optional[List[DimensionValue]] = Field(
        None,
        description='The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.',
    )
    dimensions: Optional[List[SortedDimension]] = Field(
        None, description='The list of standard dimensions the report should include.'
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )


class CrossDimensionReachCriteria(BaseModel):
    breakdown: Optional[List[SortedDimension]] = Field(
        None, description='The list of dimensions the report should include.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range this report should be run for.'
    )
    dimension: Optional[Dimension1] = Field(None, description='The dimension option.')
    dimensionFilters: Optional[List[DimensionValue]] = Field(
        None, description='The list of filters on which dimensions are filtered.'
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )
    overlapMetricNames: Optional[List[str]] = Field(
        None,
        description='The list of names of overlap metrics the report should include.',
    )
    pivoted: Optional[bool] = Field(
        None, description='Whether the report is pivoted or not. Defaults to true.'
    )


class FloodlightCriteria(BaseModel):
    customRichMediaEvents: Optional[List[DimensionValue]] = Field(
        None, description='The list of custom rich media events to include.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range this report should be run for.'
    )
    dimensionFilters: Optional[List[DimensionValue]] = Field(
        None,
        description='The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.',
    )
    dimensions: Optional[List[SortedDimension]] = Field(
        None, description='The list of dimensions the report should include.'
    )
    floodlightConfigId: Optional[DimensionValue] = Field(
        None,
        description="The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'.",
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )
    reportProperties: Optional[ReportProperties] = Field(
        None, description='The properties of the report.'
    )


class PathToConversionCriteria(BaseModel):
    activityFilters: Optional[List[DimensionValue]] = Field(
        None, description="The list of 'dfa:activity' values to filter on."
    )
    conversionDimensions: Optional[List[SortedDimension]] = Field(
        None, description='The list of conversion dimensions the report should include.'
    )
    customFloodlightVariables: Optional[List[SortedDimension]] = Field(
        None,
        description='The list of custom floodlight variables the report should include.',
    )
    customRichMediaEvents: Optional[List[DimensionValue]] = Field(
        None, description='The list of custom rich media events to include.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range this report should be run for.'
    )
    floodlightConfigId: Optional[DimensionValue] = Field(
        None,
        description="The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'.",
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )
    perInteractionDimensions: Optional[List[SortedDimension]] = Field(
        None,
        description='The list of per interaction dimensions the report should include.',
    )
    reportProperties: Optional[ReportProperties1] = Field(
        None, description='The properties of the report.'
    )


class ReachCriteria(BaseModel):
    activities: Optional[Activities] = Field(None, description='Activity group.')
    customRichMediaEvents: Optional[CustomRichMediaEvents] = Field(
        None, description='Custom Rich Media Events group.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range this report should be run for.'
    )
    dimensionFilters: Optional[List[DimensionValue]] = Field(
        None,
        description='The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.',
    )
    dimensions: Optional[List[SortedDimension]] = Field(
        None, description='The list of dimensions the report should include.'
    )
    enableAllDimensionCombinations: Optional[bool] = Field(
        None,
        description='Whether to enable all reach dimension combinations in the report. Defaults to false. If enabled, the date range of the report should be within the last 42 days.',
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )
    reachByFrequencyMetricNames: Optional[List[str]] = Field(
        None,
        description='The list of names of Reach By Frequency metrics the report should include.',
    )


class SiteCompanionSetting(BaseModel):
    companionsDisabled: Optional[bool] = Field(
        None, description='Whether companions are disabled for this site template.'
    )
    enabledSizes: Optional[List[Size]] = Field(
        None,
        description='Allowlist of companion sizes to be served via this site template. Set this list to null or empty to serve all companion sizes.',
    )
    imageOnly: Optional[bool] = Field(
        None, description='Whether to serve only static images as companions.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteCompanionSetting".',
    )


class SiteSettings(BaseModel):
    activeViewOptOut: Optional[bool] = Field(
        None, description='Whether active view creatives are disabled for this site.'
    )
    adBlockingOptOut: Optional[bool] = Field(
        None,
        description='Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.',
    )
    disableNewCookie: Optional[bool] = Field(
        None, description='Whether new cookies are disabled for this site.'
    )
    tagSetting: Optional[TagSetting] = Field(
        None,
        description='Configuration settings for dynamic and image floodlight tags.',
    )
    videoActiveViewOptOutTemplate: Optional[bool] = Field(
        None,
        description='Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.',
    )
    vpaidAdapterChoiceTemplate: Optional[VpaidAdapterChoiceTemplate] = Field(
        None,
        description="Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.",
    )


class SiteSkippableSetting(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteSkippableSetting".',
    )
    progressOffset: Optional[VideoOffset] = Field(
        None,
        description='Amount of time to play videos served to this site template before counting a view. Applicable when skippable is true.',
    )
    skipOffset: Optional[VideoOffset] = Field(
        None,
        description='Amount of time to play videos served to this site before the skip button should appear. Applicable when skippable is true.',
    )
    skippable: Optional[bool] = Field(
        None,
        description='Whether the user can skip creatives served to this site. This will act as default for new placements created under this site.',
    )


class SiteVideoSettings(BaseModel):
    companionSettings: Optional[SiteCompanionSetting] = Field(
        None,
        description='Settings for the companion creatives of video creatives served to this site.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteVideoSettings".',
    )
    obaEnabled: Optional[bool] = Field(
        None, description='Whether OBA icons are enabled for this placement.'
    )
    obaSettings: Optional[ObaIcon] = Field(
        None,
        description='Settings for the OBA icon of video creatives served to this site. This will act as default for new placements created under this site.',
    )
    orientation: Optional[Orientation1] = Field(
        None,
        description='Orientation of a site template used for video. This will act as default for new placements created under this site.',
    )
    skippableSettings: Optional[SiteSkippableSetting] = Field(
        None,
        description='Settings for the skippability of video creatives served to this site. This will act as default for new placements created under this site.',
    )
    transcodeSettings: Optional[SiteTranscodeSetting] = Field(
        None,
        description='Settings for the transcodes of video creatives served to this site. This will act as default for new placements created under this site.',
    )


class SkippableSetting(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#skippableSetting".',
    )
    progressOffset: Optional[VideoOffset] = Field(
        None,
        description='Amount of time to play videos served to this placement before counting a view. Applicable when skippable is true.',
    )
    skipOffset: Optional[VideoOffset] = Field(
        None,
        description='Amount of time to play videos served to this placement before the skip button should appear. Applicable when skippable is true.',
    )
    skippable: Optional[bool] = Field(
        None,
        description='Whether the user can skip creatives served to this placement.',
    )


class TargetingTemplate(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this targeting template. This is a required field on insert and is read-only after insert.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    dayPartTargeting: Optional[DayPartTargeting] = Field(
        None, description='Time and day targeting criteria.'
    )
    geoTargeting: Optional[GeoTargeting] = Field(
        None, description='Geographical targeting criteria.'
    )
    id: Optional[str] = Field(
        None,
        description='ID of this targeting template. This is a read-only, auto-generated field.',
    )
    keyValueTargetingExpression: Optional[KeyValueTargetingExpression] = Field(
        None, description='Key-value targeting criteria.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetingTemplate".',
    )
    languageTargeting: Optional[LanguageTargeting] = Field(
        None, description='Language targeting criteria.'
    )
    listTargetingExpression: Optional[ListTargetingExpression] = Field(
        None, description='Remarketing list targeting criteria.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of this targeting template. This field is required. It must be less than 256 characters long and unique within an advertiser.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.',
    )
    technologyTargeting: Optional[TechnologyTargeting] = Field(
        None, description='Technology platform targeting criteria.'
    )


class TargetingTemplatesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetingTemplatesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    targetingTemplates: Optional[List[TargetingTemplate]] = Field(
        None, description='Targeting template collection.'
    )


class UserRole(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this user role. This is a read-only field that can be left blank.',
    )
    defaultUserRole: Optional[bool] = Field(
        None,
        description='Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this user role. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRole".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.',
    )
    parentUserRoleId: Optional[str] = Field(
        None,
        description='ID of the user role that this user role is based on or copied from. This is a required field.',
    )
    permissions: Optional[List[UserRolePermission]] = Field(
        None, description='List of permissions associated with this user role.'
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this user role. This is a read-only field that can be left blank.',
    )


class UserRolesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    userRoles: Optional[List[UserRole]] = Field(
        None, description='User role collection.'
    )


class VideoSettings(BaseModel):
    companionSettings: Optional[CompanionSetting] = Field(
        None,
        description='Settings for the companion creatives of video creatives served to this placement.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoSettings".',
    )
    obaEnabled: Optional[bool] = Field(
        None, description='Whether OBA icons are enabled for this placement.'
    )
    obaSettings: Optional[ObaIcon] = Field(
        None,
        description='Settings for the OBA icon of video creatives served to this placement. If this object is provided, the creative-level OBA settings will be overridden.',
    )
    orientation: Optional[Orientation1] = Field(
        None,
        description='Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.',
    )
    skippableSettings: Optional[SkippableSetting] = Field(
        None,
        description='Settings for the skippability of video creatives served to this placement. If this object is provided, the creative-level skippable settings will be overridden.',
    )
    transcodeSettings: Optional[TranscodeSetting] = Field(
        None,
        description='Settings for the transcodes of video creatives served to this placement. If this object is provided, the creative-level transcode settings will be overridden.',
    )


class Ad(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this ad. This is a read-only field that can be left blank.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this ad is active. When true, archived must be false.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this ad. This is a required field on insertion.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    archived: Optional[bool] = Field(
        None,
        description='Whether this ad is archived. When true, active must be false.',
    )
    audienceSegmentId: Optional[str] = Field(
        None,
        description='Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    campaignId: Optional[str] = Field(
        None,
        description='Campaign ID of this ad. This is a required field on insertion.',
    )
    campaignIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the campaign. This is a read-only, auto-generated field.',
    )
    clickThroughUrl: Optional[ClickThroughUrl] = Field(
        None,
        description='Click-through URL for this ad. This is a required field on insertion. Applicable when type is AD_SERVING_CLICK_TRACKER.',
    )
    clickThroughUrlSuffixProperties: Optional[ClickThroughUrlSuffixProperties] = Field(
        None,
        description='Click-through URL suffix properties for this ad. Applies to the URL in the ad or (if overriding ad properties) the URL in the creative.',
    )
    comments: Optional[str] = Field(None, description='Comments for this ad.')
    compatibility: Optional[Compatibility] = Field(
        None,
        description='Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.',
    )
    createInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the creation of this ad. This is a read-only field.',
    )
    creativeGroupAssignments: Optional[List[CreativeGroupAssignment]] = Field(
        None,
        description='Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.',
    )
    creativeRotation: Optional[CreativeRotation] = Field(
        None,
        description='Creative rotation for this ad. Applicable when type is AD_SERVING_DEFAULT_AD, AD_SERVING_STANDARD_AD, or AD_SERVING_TRACKING. When type is AD_SERVING_DEFAULT_AD, this field should have exactly one creativeAssignment .',
    )
    dayPartTargeting: Optional[DayPartTargeting] = Field(
        None,
        description='Time and day targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    defaultClickThroughEventTagProperties: Optional[
        DefaultClickThroughEventTagProperties
    ] = Field(
        None, description='Default click-through event tag properties for this ad.'
    )
    deliverySchedule: Optional[DeliverySchedule] = Field(
        None,
        description='Delivery schedule information for this ad. Applicable when type is AD_SERVING_STANDARD_AD or AD_SERVING_TRACKING. This field along with subfields priority and impressionRatio are required on insertion when type is AD_SERVING_STANDARD_AD.',
    )
    dynamicClickTracker: Optional[bool] = Field(
        None,
        description='Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.',
    )
    endTime: Optional[datetime] = None
    eventTagOverrides: Optional[List[EventTagOverride]] = Field(
        None, description='Event tag overrides for this ad.'
    )
    geoTargeting: Optional[GeoTargeting] = Field(
        None,
        description='Geographical targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    id: Optional[str] = Field(
        None, description='ID of this ad. This is a read-only, auto-generated field.'
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this ad. This is a read-only, auto-generated field.',
    )
    keyValueTargetingExpression: Optional[KeyValueTargetingExpression] = Field(
        None,
        description='Key-value targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#ad".',
    )
    languageTargeting: Optional[LanguageTargeting] = Field(
        None,
        description='Language targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this ad. This is a read-only field.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this ad. This is a required field and must be less than 256 characters long.',
    )
    placementAssignments: Optional[List[PlacementAssignment]] = Field(
        None, description='Placement assignments for this ad.'
    )
    remarketingListExpression: Optional[ListTargetingExpression] = Field(
        None,
        description='Remarketing list targeting expression for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    size: Optional[Size] = Field(
        None,
        description='Size of this ad. Applicable when type is AD_SERVING_DEFAULT_AD.',
    )
    sslCompliant: Optional[bool] = Field(
        None,
        description='Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.',
    )
    sslRequired: Optional[bool] = Field(
        None,
        description='Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.',
    )
    startTime: Optional[datetime] = None
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this ad. This is a read-only field that can be left blank.',
    )
    targetingTemplateId: Optional[str] = Field(
        None,
        description='Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    technologyTargeting: Optional[TechnologyTargeting] = Field(
        None,
        description='Technology platform targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.',
    )
    type: Optional[Type] = Field(
        None,
        description='Type of ad. This is a required field on insertion. Note that default ads ( AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).',
    )


class AdsListResponse(BaseModel):
    ads: Optional[List[Ad]] = Field(None, description='Ad collection.')
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#adsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class AdvertiserLandingPagesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserLandingPagesListResponse".',
    )
    landingPages: Optional[List[LandingPage]] = Field(
        None, description='Landing page collection'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class Campaign(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this campaign. This is a read-only field that can be left blank.',
    )
    adBlockingConfiguration: Optional[AdBlockingConfiguration] = Field(
        None, description='Ad blocking settings for this campaign.'
    )
    additionalCreativeOptimizationConfigurations: Optional[
        List[CreativeOptimizationConfiguration]
    ] = Field(
        None,
        description='Additional creative optimization configurations for the campaign.',
    )
    advertiserGroupId: Optional[str] = Field(
        None, description='Advertiser group ID of the associated advertiser.'
    )
    advertiserId: Optional[str] = Field(
        None, description='Advertiser ID of this campaign. This is a required field.'
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the advertiser ID of this campaign. This is a read-only, auto-generated field.',
    )
    archived: Optional[bool] = Field(
        None, description='Whether this campaign has been archived.'
    )
    audienceSegmentGroups: Optional[List[AudienceSegmentGroup]] = Field(
        None,
        description='Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups.',
    )
    billingInvoiceCode: Optional[str] = Field(
        None,
        description='Billing invoice code included in the Campaign Manager client billing invoices associated with the campaign.',
    )
    clickThroughUrlSuffixProperties: Optional[ClickThroughUrlSuffixProperties] = Field(
        None,
        description='Click-through URL suffix override properties for this campaign.',
    )
    comment: Optional[str] = Field(
        None,
        description='Arbitrary comments about this campaign. Must be less than 256 characters long.',
    )
    createInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the creation of this campaign. This is a read-only field.',
    )
    creativeGroupIds: Optional[List[str]] = Field(
        None,
        description='List of creative group IDs that are assigned to the campaign.',
    )
    creativeOptimizationConfiguration: Optional[CreativeOptimizationConfiguration] = (
        Field(None, description='Creative optimization configuration for the campaign.')
    )
    defaultClickThroughEventTagProperties: Optional[
        DefaultClickThroughEventTagProperties
    ] = Field(
        None,
        description='Click-through event tag ID override properties for this campaign.',
    )
    defaultLandingPageId: Optional[str] = Field(
        None, description='The default landing page ID for this campaign.'
    )
    endDate: Optional[date] = None
    eventTagOverrides: Optional[List[EventTagOverride]] = Field(
        None,
        description='Overrides that can be used to activate or deactivate advertiser event tags.',
    )
    externalId: Optional[str] = Field(
        None, description='External ID for this campaign.'
    )
    id: Optional[str] = Field(
        None,
        description='ID of this campaign. This is a read-only auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this campaign. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaign".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this campaign. This is a read-only field.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this campaign. This is a required field and must be less than 512 characters long and unique among campaigns of the same advertiser.',
    )
    nielsenOcrEnabled: Optional[bool] = Field(
        None, description='Whether Nielsen reports are enabled for this campaign.'
    )
    startDate: Optional[date] = None
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this campaign. This is a read-only field that can be left blank.',
    )
    traffickerEmails: Optional[List[str]] = Field(
        None, description='Campaign trafficker contact emails.'
    )


class CampaignsListResponse(BaseModel):
    campaigns: Optional[List[Campaign]] = Field(
        None, description='Campaign collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class CompatibleFields(BaseModel):
    crossDimensionReachReportCompatibleFields: Optional[
        CrossDimensionReachReportCompatibleFields
    ] = Field(
        None,
        description='Contains items that are compatible to be selected for a report of type "CROSS_DIMENSION_REACH".',
    )
    floodlightReportCompatibleFields: Optional[FloodlightReportCompatibleFields] = (
        Field(
            None,
            description='Contains items that are compatible to be selected for a report of type "FLOODLIGHT".',
        )
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#compatibleFields.',
    )
    pathAttributionReportCompatibleFields: Optional[PathReportCompatibleFields] = Field(
        None,
        description='Contains items that are compatible to be selected for a report of type "PATH_ATTRIBUTION".',
    )
    pathReportCompatibleFields: Optional[PathReportCompatibleFields] = Field(
        None,
        description='Contains items that are compatible to be selected for a report of type "PATH".',
    )
    pathToConversionReportCompatibleFields: Optional[
        PathToConversionReportCompatibleFields
    ] = Field(
        None,
        description='Contains items that are compatible to be selected for a report of type "PATH_TO_CONVERSION".',
    )
    reachReportCompatibleFields: Optional[ReachReportCompatibleFields] = Field(
        None,
        description='Contains items that are compatible to be selected for a report of type "REACH".',
    )
    reportCompatibleFields: Optional[ReportCompatibleFields] = Field(
        None,
        description='Contains items that are compatible to be selected for a report of type "STANDARD".',
    )


class CreativeCustomEvent(BaseModel):
    advertiserCustomEventId: Optional[str] = Field(
        None,
        description='Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.',
    )
    advertiserCustomEventName: Optional[str] = Field(
        None, description='User-entered name for the event.'
    )
    advertiserCustomEventType: Optional[AdvertiserCustomEventType] = Field(
        None, description='Type of the event. This is a read-only field.'
    )
    artworkLabel: Optional[str] = Field(
        None,
        description='Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.',
    )
    artworkType: Optional[ArtworkType] = Field(
        None, description='Artwork type used by the creative.This is a read-only field.'
    )
    exitClickThroughUrl: Optional[CreativeClickThroughUrl] = Field(
        None,
        description='Exit click-through URL for the event. This field is used only for exit events.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this event. This is a required field and should not be modified after insertion.',
    )
    popupWindowProperties: Optional[PopupWindowProperties] = Field(
        None,
        description='Properties for rich media popup windows. This field is used only for exit events.',
    )
    targetType: Optional[TargetType] = Field(
        None, description='Target type used by the event.'
    )
    videoReportingId: Optional[str] = Field(
        None,
        description='Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.',
    )


class CustomEvent(BaseModel):
    annotateClickEvent: Optional[CustomEventClickAnnotation] = Field(
        None,
        description='Annotate a click event. This field is mutually exclusive with insertEvent and annotateImpressionEvent. This or insertEvent and annotateImpressionEvent is a required field.',
    )
    annotateImpressionEvent: Optional[CustomEventImpressionAnnotation] = Field(
        None,
        description='Annotate an impression. This field is mutually exclusive with insertEvent and annotateClickEvent. This or insertEvent and annotateClickEvent is a required field.',
    )
    customVariables: Optional[List[CustomVariable]] = Field(
        None, description='Custom variables associated with the event.'
    )
    eventType: Optional[EventType] = Field(
        None,
        description='The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.',
    )
    floodlightConfigurationId: Optional[str] = Field(
        None,
        description='Floodlight configuration ID of the advertiser the event is linked to. This is a required field.',
    )
    insertEvent: Optional[CustomEventInsert] = Field(
        None,
        description='Insert custom event. This field is mutually exclusive with annotateClickEvent and annotateImpressionEvent. This or annotateClickEvent and annotateImpressionEvent is a required field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEvent".',
    )
    ordinal: Optional[str] = Field(
        None, description='The ordinal of this custom event. This is a required field.'
    )
    timestampMicros: Optional[str] = Field(
        None,
        description='The timestamp of this custom event, in Unix epoch micros. This is a required field.',
    )


class CustomEventStatus(BaseModel):
    customEvent: Optional[CustomEvent] = Field(
        None, description='The original custom event that was inserted.'
    )
    errors: Optional[List[CustomEventError]] = Field(
        None, description='A list of errors related to this custom event.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventStatus".',
    )


class CustomEventsBatchInsertRequest(BaseModel):
    customEvents: Optional[List[CustomEvent]] = Field(
        None, description='The set of custom events to insert.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventsBatchInsertRequest".',
    )


class CustomEventsBatchInsertResponse(BaseModel):
    hasFailures: Optional[bool] = Field(
        None, description='Indicates that some or all custom events failed to insert.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventsBatchInsertResponse".',
    )
    status: Optional[List[CustomEventStatus]] = Field(
        None,
        description='The insert status of each custom event. Statuses are returned in the same order that conversions are inserted.',
    )


class DisjunctiveMatchStatement(BaseModel):
    eventFilters: Optional[List[EventFilter]] = Field(
        None,
        description='The event filters contained within this disjunctive match statement.',
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#disjunctiveMatchStatement.',
    )


class FloodlightActivitiesListResponse(BaseModel):
    floodlightActivities: Optional[List[FloodlightActivity]] = Field(
        None, description='Floodlight activity collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivitiesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class Placement(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Account ID of this placement. This field can be left blank.'
    )
    adBlockingOptOut: Optional[bool] = Field(
        None,
        description='Whether this placement opts out of ad blocking. When true, ad blocking is disabled for this placement. When false, the campaign and site settings take effect.',
    )
    additionalSizes: Optional[List[Size]] = Field(
        None,
        description='Additional sizes associated with this placement. When inserting or updating a placement, only the size ID field is used.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this placement. This field can be left blank.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    archived: Optional[bool] = Field(
        None, description='Whether this placement is archived.'
    )
    campaignId: Optional[str] = Field(
        None,
        description='Campaign ID of this placement. This field is a required field on insertion.',
    )
    campaignIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the campaign. This is a read-only, auto-generated field.',
    )
    comment: Optional[str] = Field(None, description='Comments for this placement.')
    compatibility: Optional[Compatibility] = Field(
        None,
        description='Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.',
    )
    contentCategoryId: Optional[str] = Field(
        None, description='ID of the content category assigned to this placement.'
    )
    createInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the creation of this placement. This is a read-only field.',
    )
    directorySiteId: Optional[str] = Field(
        None,
        description='Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.',
    )
    directorySiteIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the directory site. This is a read-only, auto-generated field.',
    )
    externalId: Optional[str] = Field(
        None, description='External ID for this placement.'
    )
    id: Optional[str] = Field(
        None,
        description='ID of this placement. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this placement. This is a read-only, auto-generated field.',
    )
    keyName: Optional[str] = Field(
        None,
        description='Key name of this placement. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placement".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this placement. This is a read-only field.',
    )
    lookbackConfiguration: Optional[LookbackConfiguration] = Field(
        None, description='Lookback window settings for this placement.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of this placement.This is a required field and must be less than or equal to 512 characters long.',
    )
    paymentApproved: Optional[bool] = Field(
        None,
        description='Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.',
    )
    paymentSource: Optional[PaymentSource] = Field(
        None,
        description='Payment source for this placement. This is a required field that is read-only after insertion.',
    )
    placementGroupId: Optional[str] = Field(
        None, description="ID of this placement's group, if applicable."
    )
    placementGroupIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the placement group. This is a read-only, auto-generated field.',
    )
    placementStrategyId: Optional[str] = Field(
        None, description='ID of the placement strategy assigned to this placement.'
    )
    pricingSchedule: Optional[PricingSchedule] = Field(
        None,
        description='Pricing schedule of this placement. This field is required on insertion, specifically subfields startDate, endDate and pricingType.',
    )
    primary: Optional[bool] = Field(
        None,
        description="Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock's primaryPlacementId field to the ID of this placement.",
    )
    publisherUpdateInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the last publisher update. This is a read-only field.',
    )
    siteId: Optional[str] = Field(
        None,
        description='Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.',
    )
    siteIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the site. This is a read-only, auto-generated field.',
    )
    size: Optional[Size] = Field(
        None,
        description='Size associated with this placement. When inserting or updating a placement, only the size ID field is used. This field is required on insertion.',
    )
    sslRequired: Optional[bool] = Field(
        None,
        description='Whether creatives assigned to this placement must be SSL-compliant.',
    )
    status: Optional[Status5] = Field(None, description='Third-party placement status.')
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this placement. This field can be left blank.',
    )
    tagFormats: Optional[List[TagFormat1]] = Field(
        None,
        description='Tag formats to generate for this placement. This field is required on insertion. Acceptable values are: - "PLACEMENT_TAG_STANDARD" - "PLACEMENT_TAG_IFRAME_JAVASCRIPT" - "PLACEMENT_TAG_IFRAME_ILAYER" - "PLACEMENT_TAG_INTERNAL_REDIRECT" - "PLACEMENT_TAG_JAVASCRIPT" - "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" - "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" - "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" - "PLACEMENT_TAG_CLICK_COMMANDS" - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" - "PLACEMENT_TAG_TRACKING" - "PLACEMENT_TAG_TRACKING_IFRAME" - "PLACEMENT_TAG_TRACKING_JAVASCRIPT" ',
    )
    tagSetting: Optional[TagSetting] = Field(
        None, description='Tag settings for this placement.'
    )
    videoActiveViewOptOut: Optional[bool] = Field(
        None,
        description='Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.',
    )
    videoSettings: Optional[VideoSettings] = Field(
        None,
        description='A collection of settings which affect video creatives served through this placement. Applicable to placements with IN_STREAM_VIDEO compatibility.',
    )
    vpaidAdapterChoice: Optional[VpaidAdapterChoice] = Field(
        None,
        description='VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement. *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.',
    )


class PlacementGroup(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this placement group. This is a read-only field that can be left blank.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this placement group. This is a required field on insertion.',
    )
    advertiserIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.',
    )
    archived: Optional[bool] = Field(
        None, description='Whether this placement group is archived.'
    )
    campaignId: Optional[str] = Field(
        None,
        description='Campaign ID of this placement group. This field is required on insertion.',
    )
    campaignIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the campaign. This is a read-only, auto-generated field.',
    )
    childPlacementIds: Optional[List[str]] = Field(
        None,
        description='IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field.',
    )
    comment: Optional[str] = Field(
        None, description='Comments for this placement group.'
    )
    contentCategoryId: Optional[str] = Field(
        None, description='ID of the content category assigned to this placement group.'
    )
    createInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the creation of this placement group. This is a read-only field.',
    )
    directorySiteId: Optional[str] = Field(
        None,
        description='Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion.',
    )
    directorySiteIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the directory site. This is a read-only, auto-generated field.',
    )
    externalId: Optional[str] = Field(
        None, description='External ID for this placement.'
    )
    id: Optional[str] = Field(
        None,
        description='ID of this placement group. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this placement group. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementGroup".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Information about the most recent modification of this placement group. This is a read-only field.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this placement group. This is a required field and must be less than 256 characters long.',
    )
    placementGroupType: Optional[PlacementGroupType] = Field(
        None,
        description='Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion.',
    )
    placementStrategyId: Optional[str] = Field(
        None,
        description='ID of the placement strategy assigned to this placement group.',
    )
    pricingSchedule: Optional[PricingSchedule] = Field(
        None,
        description='Pricing schedule of this placement group. This field is required on insertion.',
    )
    primaryPlacementId: Optional[str] = Field(
        None,
        description='ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements.',
    )
    primaryPlacementIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the primary placement. This is a read-only, auto-generated field.',
    )
    siteId: Optional[str] = Field(
        None,
        description='Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion.',
    )
    siteIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the site. This is a read-only, auto-generated field.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this placement group. This is a read-only field that can be left blank.',
    )


class PlacementGroupsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementGroupsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    placementGroups: Optional[List[PlacementGroup]] = Field(
        None, description='Placement group collection.'
    )


class PlacementsListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementsListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    placements: Optional[List[Placement]] = Field(
        None, description='Placement collection.'
    )


class Site(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this site. This is a read-only field that can be left blank.',
    )
    approved: Optional[bool] = Field(None, description='Whether this site is approved.')
    directorySiteId: Optional[str] = Field(
        None,
        description='Directory site associated with this site. This is a required field that is read-only after insertion.',
    )
    directorySiteIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the directory site. This is a read-only, auto-generated field.',
    )
    id: Optional[str] = Field(
        None, description='ID of this site. This is a read-only, auto-generated field.'
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this site. This is a read-only, auto-generated field.',
    )
    keyName: Optional[str] = Field(
        None,
        description='Key name of this site. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#site".',
    )
    name: Optional[str] = Field(
        None,
        description='Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.',
    )
    siteContacts: Optional[List[SiteContact]] = Field(
        None, description='Site contacts.'
    )
    siteSettings: Optional[SiteSettings] = Field(
        None, description='Site-wide settings.'
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this site. This is a read-only field that can be left blank.',
    )
    videoSettings: Optional[SiteVideoSettings] = Field(
        None,
        description='Default video settings for new placements created under this site. This value will be used to populate the placements.videoSettings field, when no value is specified for the new placement.',
    )


class SitesListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#sitesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )
    sites: Optional[List[Site]] = Field(None, description='Site collection.')


class ChannelGroupingRule(BaseModel):
    disjunctiveMatchStatements: Optional[List[DisjunctiveMatchStatement]] = Field(
        None, description='The disjunctive match statements contained within this rule.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#channelGroupingRule.',
    )
    name: Optional[str] = Field(None, description='Rule name.')


class CreativeAsset(BaseModel):
    actionScript3: Optional[bool] = Field(
        None,
        description='Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.',
    )
    additionalSizes: Optional[List[Size]] = Field(
        None,
        description='Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.',
    )
    alignment: Optional[Alignment] = Field(
        None,
        description='Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .',
    )
    artworkType: Optional[ArtworkType] = Field(
        None,
        description='Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.',
    )
    assetIdentifier: Optional[CreativeAssetId] = Field(
        None,
        description='Identifier of this asset. This is the same identifier returned during creative asset insert operation. This is a required field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.',
    )
    audioBitRate: Optional[int] = Field(
        None,
        description='Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.',
    )
    audioSampleRate: Optional[int] = Field(
        None,
        description='Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.',
    )
    backupImageExit: Optional[CreativeCustomEvent] = Field(
        None,
        description='Exit event configured for the backup image. Applicable to the following creative types: all RICH_MEDIA.',
    )
    bitRate: Optional[int] = Field(
        None,
        description='Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.',
    )
    childAssetType: Optional[ChildAssetType] = Field(
        None,
        description='Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.',
    )
    collapsedSize: Optional[Size] = Field(
        None,
        description='Size of an asset when collapsed. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.',
    )
    companionCreativeIds: Optional[List[str]] = Field(
        None,
        description='List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.',
    )
    customStartTimeValue: Optional[int] = Field(
        None,
        description='Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.',
    )
    detectedFeatures: Optional[List[DetectedFeature]] = Field(
        None,
        description='List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    displayType: Optional[DisplayType] = Field(
        None,
        description='Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.',
    )
    duration: Optional[int] = Field(
        None,
        description='Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.',
    )
    durationType: Optional[DurationType] = Field(
        None,
        description='Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.',
    )
    expandedDimension: Optional[Size] = Field(
        None,
        description='Detected expanded dimension for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.',
    )
    fileSize: Optional[str] = Field(
        None,
        description='File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.',
    )
    flashVersion: Optional[int] = Field(
        None,
        description='Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    frameRate: Optional[float] = Field(
        None,
        description='Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.',
    )
    hideFlashObjects: Optional[bool] = Field(
        None,
        description='Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.',
    )
    hideSelectionBoxes: Optional[bool] = Field(
        None,
        description='Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.',
    )
    horizontallyLocked: Optional[bool] = Field(
        None,
        description='Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.',
    )
    id: Optional[str] = Field(
        None,
        description='Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of the asset. This is a read-only, auto-generated field.',
    )
    mediaDuration: Optional[float] = Field(
        None,
        description='Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.',
    )
    mimeType: Optional[str] = Field(
        None,
        description='Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.',
    )
    offset: Optional[OffsetPosition] = Field(
        None,
        description='Offset position for an asset in collapsed mode. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, only applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.',
    )
    orientation: Optional[Orientation] = Field(
        None,
        description='Orientation of video asset. This is a read-only, auto-generated field.',
    )
    originalBackup: Optional[bool] = Field(
        None,
        description='Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.',
    )
    politeLoad: Optional[bool] = Field(
        None, description='Whether this asset is used as a polite load asset.'
    )
    position: Optional[OffsetPosition] = Field(
        None,
        description='Offset position for an asset. Applicable to the following creative types: all RICH_MEDIA.',
    )
    positionLeftUnit: Optional[PositionLeftUnit] = Field(
        None,
        description='Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.',
    )
    positionTopUnit: Optional[PositionTopUnit] = Field(
        None,
        description='Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.',
    )
    progressiveServingUrl: Optional[str] = Field(
        None,
        description='Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.',
    )
    pushdown: Optional[bool] = Field(
        None,
        description='Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.',
    )
    pushdownDuration: Optional[float] = Field(
        None,
        description='Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.',
    )
    role: Optional[Role] = Field(
        None,
        description='Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. ',
    )
    size: Optional[Size] = Field(
        None,
        description='Size associated with this creative asset. This is a required field when applicable; however for IMAGE and FLASH_INPAGE, creatives if left blank, this field will be automatically set using the actual size of the associated image asset. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    sslCompliant: Optional[bool] = Field(
        None,
        description='Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.',
    )
    startTimeType: Optional[StartTimeType] = Field(
        None,
        description='Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.',
    )
    streamingServingUrl: Optional[str] = Field(
        None,
        description='Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.',
    )
    transparency: Optional[bool] = Field(
        None,
        description='Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.',
    )
    verticallyLocked: Optional[bool] = Field(
        None,
        description='Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.',
    )
    windowMode: Optional[WindowMode] = Field(
        None,
        description='Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.',
    )
    zIndex: Optional[int] = Field(
        None,
        description='zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.',
    )
    zipFilename: Optional[str] = Field(
        None,
        description='File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.',
    )
    zipFilesize: Optional[str] = Field(
        None,
        description='Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.',
    )


class CreativeAssetMetadata(BaseModel):
    assetIdentifier: Optional[CreativeAssetId] = Field(
        None, description='ID of the creative asset. This is a required field.'
    )
    clickTags: Optional[List[ClickTag]] = Field(
        None,
        description='List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.',
    )
    counterCustomEvents: Optional[List[CreativeCustomEvent]] = Field(
        None,
        description='List of counter events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.',
    )
    detectedFeatures: Optional[List[DetectedFeature]] = Field(
        None,
        description='List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.',
    )
    exitCustomEvents: Optional[List[CreativeCustomEvent]] = Field(
        None,
        description='List of exit events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.',
    )
    id: Optional[str] = Field(
        None,
        description='Numeric ID of the asset. This is a read-only, auto-generated field.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the numeric ID of the asset. This is a read-only, auto-generated field.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeAssetMetadata".',
    )
    richMedia: Optional[bool] = Field(
        None,
        description='True if the uploaded asset is a rich media asset. This is a read-only, auto-generated field.',
    )
    timerCustomEvents: Optional[List[CreativeCustomEvent]] = Field(
        None,
        description='List of timer events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.',
    )
    warnedValidationRules: Optional[List[WarnedValidationRule]] = Field(
        None,
        description='Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - "ADMOB_REFERENCED" - "ASSET_FORMAT_UNSUPPORTED_DCM" - "ASSET_INVALID" - "CLICK_TAG_HARD_CODED" - "CLICK_TAG_INVALID" - "CLICK_TAG_IN_GWD" - "CLICK_TAG_MISSING" - "CLICK_TAG_MORE_THAN_ONE" - "CLICK_TAG_NON_TOP_LEVEL" - "COMPONENT_UNSUPPORTED_DCM" - "ENABLER_UNSUPPORTED_METHOD_DCM" - "EXTERNAL_FILE_REFERENCED" - "FILE_DETAIL_EMPTY" - "FILE_TYPE_INVALID" - "GWD_PROPERTIES_INVALID" - "HTML5_FEATURE_UNSUPPORTED" - "LINKED_FILE_NOT_FOUND" - "MAX_FLASH_VERSION_11" - "MRAID_REFERENCED" - "NOT_SSL_COMPLIANT" - "ORPHANED_ASSET" - "PRIMARY_HTML_MISSING" - "SVG_INVALID" - "ZIP_INVALID" ',
    )


class ChannelGrouping(BaseModel):
    fallbackName: Optional[str] = Field(
        None, description='ChannelGrouping fallback name.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#channelGrouping.',
    )
    name: Optional[str] = Field(None, description='ChannelGrouping name.')
    rules: Optional[List[ChannelGroupingRule]] = Field(
        None, description='The rules contained within this channel grouping.'
    )


class Creative(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether the creative is active. Applicable to all creative types.',
    )
    adParameters: Optional[str] = Field(
        None,
        description='Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.',
    )
    adTagKeys: Optional[List[str]] = Field(
        None,
        description='Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    additionalSizes: Optional[List[Size]] = Field(
        None,
        description='Additional sizes associated with a responsive creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. Applicable to DISPLAY creatives when the primary asset type is HTML_IMAGE.',
    )
    advertiserId: Optional[str] = Field(
        None,
        description='Advertiser ID of this creative. This is a required field. Applicable to all creative types.',
    )
    allowScriptAccess: Optional[bool] = Field(
        None,
        description='Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.',
    )
    archived: Optional[bool] = Field(
        None,
        description='Whether the creative is archived. Applicable to all creative types.',
    )
    artworkType: Optional[ArtworkType] = Field(
        None,
        description='Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    authoringSource: Optional[AuthoringSource] = Field(
        None,
        description='Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.',
    )
    authoringTool: Optional[AuthoringTool] = Field(
        None,
        description='Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.',
    )
    autoAdvanceImages: Optional[bool] = Field(
        None,
        description='Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.',
    )
    backgroundColor: Optional[str] = Field(
        None,
        description='The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.',
    )
    backupImageClickThroughUrl: Optional[CreativeClickThroughUrl] = Field(
        None,
        description='Click-through URL for backup image. Applicable to ENHANCED_BANNER when the primary asset type is not HTML_IMAGE.',
    )
    backupImageFeatures: Optional[List[BackupImageFeature]] = Field(
        None,
        description="List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by Campaign Manager for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets' detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.",
    )
    backupImageReportingLabel: Optional[str] = Field(
        None,
        description='Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    backupImageTargetWindow: Optional[TargetWindow] = Field(
        None,
        description='Target window for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    clickTags: Optional[List[ClickTag]] = Field(
        None,
        description='Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    commercialId: Optional[str] = Field(
        None,
        description='Industry standard ID assigned to creative for reach and frequency. Applicable to INSTREAM_VIDEO_REDIRECT creatives.',
    )
    companionCreatives: Optional[List[str]] = Field(
        None,
        description='List of companion creatives assigned to an in-Stream video creative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID, all INSTREAM_AUDIO and all INSTREAM_VIDEO with dynamicAssetSelection set to false.',
    )
    compatibility: Optional[List[CompatibilityEnum]] = Field(
        None,
        description='Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. IN_STREAM_AUDIO refers to rendering in in-stream audio ads developed with the VAST standard. Applicable to all creative types. Acceptable values are: - "APP" - "APP_INTERSTITIAL" - "IN_STREAM_VIDEO" - "IN_STREAM_AUDIO" - "DISPLAY" - "DISPLAY_INTERSTITIAL" ',
    )
    convertFlashToHtml5: Optional[bool] = Field(
        None,
        description="Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don't want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.",
    )
    counterCustomEvents: Optional[List[CreativeCustomEvent]] = Field(
        None,
        description='List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.',
    )
    creativeAssetSelection: Optional[CreativeAssetSelection] = Field(
        None, description='Required if dynamicAssetSelection is true.'
    )
    creativeAssets: Optional[List[CreativeAsset]] = Field(
        None,
        description='Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT',
    )
    creativeFieldAssignments: Optional[List[CreativeFieldAssignment]] = Field(
        None,
        description='Creative field assignments for this creative. Applicable to all creative types.',
    )
    customKeyValues: Optional[List[str]] = Field(
        None,
        description='Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    dynamicAssetSelection: Optional[bool] = Field(
        None,
        description='Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.',
    )
    exitCustomEvents: Optional[List[CreativeCustomEvent]] = Field(
        None,
        description='List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    fsCommand: Optional[FsCommand] = Field(
        None,
        description='OpenWindow FSCommand of this creative. This lets the SWF file communicate with either Flash Player or the program hosting Flash Player, such as a web browser. This is only triggered if allowScriptAccess field is true. Applicable to the following creative types: FLASH_INPAGE.',
    )
    htmlCode: Optional[str] = Field(
        None,
        description='HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.',
    )
    htmlCodeLocked: Optional[bool] = Field(
        None,
        description='Whether HTML code is generated by Campaign Manager or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.',
    )
    id: Optional[str] = Field(
        None,
        description='ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.',
    )
    idDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the ID of this creative. This is a read-only field. Applicable to all creative types.',
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creative".',
    )
    lastModifiedInfo: Optional[LastModifiedInfo] = Field(
        None,
        description='Creative last modification information. This is a read-only field. Applicable to all creative types.',
    )
    latestTraffickedCreativeId: Optional[str] = Field(
        None,
        description='Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    mediaDescription: Optional[str] = Field(
        None,
        description='Description of the audio or video ad. Applicable to the following creative types: all INSTREAM_VIDEO, INSTREAM_AUDIO, and all VPAID.',
    )
    mediaDuration: Optional[float] = Field(
        None,
        description='Creative audio or video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, INSTREAM_AUDIO, all RICH_MEDIA, and all VPAID.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.',
    )
    obaIcon: Optional[ObaIcon] = Field(
        None,
        description='Online behavioral advertising icon to be added to the creative. Applicable to the following creative types: all INSTREAM_VIDEO.',
    )
    overrideCss: Optional[str] = Field(
        None,
        description='Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.',
    )
    progressOffset: Optional[VideoOffset] = Field(
        None,
        description='Amount of time to play the video before counting a view. Applicable to the following creative types: all INSTREAM_VIDEO.',
    )
    redirectUrl: Optional[str] = Field(
        None,
        description='URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT',
    )
    renderingId: Optional[str] = Field(
        None,
        description='ID of current rendering version. This is a read-only field. Applicable to all creative types.',
    )
    renderingIdDimensionValue: Optional[DimensionValue] = Field(
        None,
        description='Dimension value for the rendering ID of this creative. This is a read-only field. Applicable to all creative types.',
    )
    requiredFlashPluginVersion: Optional[str] = Field(
        None,
        description='The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    requiredFlashVersion: Optional[int] = Field(
        None,
        description='The internal Flash version for this creative as calculated by Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.',
    )
    size: Optional[Size] = Field(
        None,
        description='Size associated with this creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. This is a required field when applicable; however for IMAGE, FLASH_INPAGE creatives, and for DISPLAY creatives with a primary asset of type HTML_IMAGE, if left blank, this field will be automatically set using the actual size of the associated image assets. Applicable to the following creative types: DISPLAY, DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA.',
    )
    skipOffset: Optional[VideoOffset] = Field(
        None,
        description='Amount of time to play the video before the skip button appears. Applicable to the following creative types: all INSTREAM_VIDEO.',
    )
    skippable: Optional[bool] = Field(
        None,
        description='Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.',
    )
    sslCompliant: Optional[bool] = Field(
        None,
        description='Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.',
    )
    sslOverride: Optional[bool] = Field(
        None,
        description="Whether creative should be treated as SSL compliant even if the system scan shows it's not. Applicable to all creative types.",
    )
    studioAdvertiserId: Optional[str] = Field(
        None,
        description='Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    studioCreativeId: Optional[str] = Field(
        None,
        description='Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    studioTraffickedCreativeId: Optional[str] = Field(
        None,
        description='Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    subaccountId: Optional[str] = Field(
        None,
        description='Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.',
    )
    thirdPartyBackupImageImpressionsUrl: Optional[str] = Field(
        None,
        description='Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.',
    )
    thirdPartyRichMediaImpressionsUrl: Optional[str] = Field(
        None,
        description='Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.',
    )
    thirdPartyUrls: Optional[List[ThirdPartyTrackingUrl]] = Field(
        None,
        description='Third-party URLs for tracking in-stream creative events. Applicable to the following creative types: all INSTREAM_VIDEO, all INSTREAM_AUDIO, and all VPAID.',
    )
    timerCustomEvents: Optional[List[CreativeCustomEvent]] = Field(
        None,
        description='List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.',
    )
    totalFileSize: Optional[str] = Field(
        None,
        description='Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.',
    )
    type: Optional[Type1] = Field(
        None,
        description='Type of this creative. This is a required field. Applicable to all creative types. *Note:* FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.',
    )
    universalAdId: Optional[UniversalAdId] = Field(
        None,
        description='A Universal Ad ID as per the VAST 4.0 spec. Applicable to the following creative types: INSTREAM_AUDIO and INSTREAM_VIDEO and VPAID.',
    )
    version: Optional[int] = Field(
        None,
        description='The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.',
    )


class CreativesListResponse(BaseModel):
    creatives: Optional[List[Creative]] = Field(
        None, description='Creative collection.'
    )
    kind: Optional[str] = Field(
        None,
        description='Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativesListResponse".',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to be used for the next list operation.'
    )


class PathAttributionCriteria(BaseModel):
    activityFilters: Optional[List[DimensionValue]] = Field(
        None, description="The list of 'dfa:activity' values to filter on."
    )
    customChannelGrouping: Optional[ChannelGrouping] = Field(
        None, description='Channel Grouping.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range this report should be run for.'
    )
    dimensions: Optional[List[SortedDimension]] = Field(
        None, description='The list of dimensions the report should include.'
    )
    floodlightConfigId: Optional[DimensionValue] = Field(
        None,
        description="The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'.",
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )
    pathFilters: Optional[List[PathFilter]] = Field(None, description='Path Filters.')


class PathCriteria(BaseModel):
    activityFilters: Optional[List[DimensionValue]] = Field(
        None, description="The list of 'dfa:activity' values to filter on."
    )
    customChannelGrouping: Optional[ChannelGrouping] = Field(
        None, description='Channel Grouping.'
    )
    dateRange: Optional[DateRange] = Field(
        None, description='The date range this report should be run for.'
    )
    dimensions: Optional[List[SortedDimension]] = Field(
        None, description='The list of dimensions the report should include.'
    )
    floodlightConfigId: Optional[DimensionValue] = Field(
        None,
        description="The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'.",
    )
    metricNames: Optional[List[str]] = Field(
        None, description='The list of names of metrics the report should include.'
    )
    pathFilters: Optional[List[PathFilter]] = Field(None, description='Path Filters.')


class Report(BaseModel):
    accountId: Optional[str] = Field(
        None, description='The account ID to which this report belongs.'
    )
    criteria: Optional[Criteria] = Field(
        None, description='The report criteria for a report of type "STANDARD".'
    )
    crossDimensionReachCriteria: Optional[CrossDimensionReachCriteria] = Field(
        None,
        description='The report criteria for a report of type "CROSS_DIMENSION_REACH".',
    )
    delivery: Optional[Delivery] = Field(
        None, description="The report's email delivery settings."
    )
    etag: Optional[str] = Field(
        None, description='The eTag of this response for caching purposes.'
    )
    fileName: Optional[str] = Field(
        None,
        description='The filename used when generating report files for this report.',
    )
    floodlightCriteria: Optional[FloodlightCriteria] = Field(
        None, description='The report criteria for a report of type "FLOODLIGHT".'
    )
    format: Optional[Format] = Field(
        None,
        description='The output format of the report. If not specified, default format is "CSV". Note that the actual format in the completed report file might differ if for instance the report\'s size exceeds the format\'s capabilities. "CSV" will then be the fallback format.',
    )
    id: Optional[str] = Field(
        None, description='The unique ID identifying this report resource.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of resource this is, in this case dfareporting#report.',
    )
    lastModifiedTime: Optional[str] = Field(
        None,
        description='The timestamp (in milliseconds since epoch) of when this report was last modified.',
    )
    name: Optional[str] = Field(None, description='The name of the report.')
    ownerProfileId: Optional[str] = Field(
        None, description='The user profile id of the owner of this report.'
    )
    pathAttributionCriteria: Optional[PathAttributionCriteria] = Field(
        None, description='The report criteria for a report of type "PATH_ATTRIBUTION".'
    )
    pathCriteria: Optional[PathCriteria] = Field(
        None, description='The report criteria for a report of type "PATH".'
    )
    pathToConversionCriteria: Optional[PathToConversionCriteria] = Field(
        None,
        description='The report criteria for a report of type "PATH_TO_CONVERSION".',
    )
    reachCriteria: Optional[ReachCriteria] = Field(
        None, description='The report criteria for a report of type "REACH".'
    )
    schedule: Optional[Schedule] = Field(
        None,
        description='The report\'s schedule. Can only be set if the report\'s \'dateRange\' is a relative date range and the relative date range is not "TODAY".',
    )
    subAccountId: Optional[str] = Field(
        None,
        description='The subaccount ID to which this report belongs if applicable.',
    )
    type: Optional[Type10] = Field(None, description='The type of the report.')


class ReportList(BaseModel):
    etag: Optional[str] = Field(
        None, description='The eTag of this response for caching purposes.'
    )
    items: Optional[List[Report]] = Field(
        None, description='The reports returned in this response.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of list this is, in this case dfareporting#reportList.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through reports. To retrieve the next page of results, set the next request\'s "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.',
    )
